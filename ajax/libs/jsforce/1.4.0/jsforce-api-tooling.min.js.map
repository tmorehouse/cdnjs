{"version":3,"file":"jsforce-api-tooling.min.js","sources":["jsforce-api-tooling.js"],"names":["e","exports","module","define","amd","o","window","global","self","f","jsforce","modules","api","Tooling","t","n","r","s","u","a","require","i","Error","code","l","call","length",1,"_","Cache","conn","this","_conn","_logger","delegates","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","on","bind","res","result","types","map","so","name","each","sobject","_baseUrl","request","apply","arguments","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","completions","isString"],"mappings":"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","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var o;\"undefined\"!=typeof window?o=window:\"undefined\"!=typeof global?o=global:\"undefined\"!=typeof self&&(o=self);var f=o;f=f.jsforce||(f.jsforce={}),f=f.modules||(f.modules={}),f=f.api||(f.api={}),f.Tooling=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file Manages Tooling APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\nvar util  = jsforce.require('util'),\n    _     = jsforce.require('underscore'),\n    Cache = jsforce.require('./cache');\n\n/**\n * API class for Tooling API call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar Tooling = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n  var delegates = [\n    \"query\",\n    \"queryMore\",\n    \"create\",\n    \"insert\",\n    \"retrieve\",\n    \"update\",\n    \"upsert\",\n    \"del\",\n    \"delete\",\n    \"destroy\",\n    \"describe\",\n    \"describeGlobal\",\n    \"sobject\"\n  ];\n  delegates.forEach(function(method) {\n    this[method] = conn.constructor.prototype[method];\n  }, this);\n\n  this.cache = new Cache();\n\n  var cacheOptions = {\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n\n  cacheOptions = { key: 'describeGlobal' };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n\n  this.initialize();\n};\n\n/**\n * Initialize tooling API\n * @protected\n */\nTooling.prototype.initialize = function() {\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\n      _.each(types, this.sobject, this);\n    }\n  }, this));\n};\n\n/**\n * @private\n */\nTooling.prototype._baseUrl = function() {\n  return this._conn._baseUrl() + \"/tooling\";\n};\n\n/**\n * @private\n */\nTooling.prototype.request = function() {\n  return this._conn.request.apply(this._conn, arguments);\n};\n\n/**\n * Execute query by using SOQL\n * \n * @param {String} soql - SOQL string\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Query next record set by using query locator\n *\n * @method Tooling#query\n * @param {String} locator - Next record set locator\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Retrieve specified records\n *\n * @method Tooling#queryMore\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs \n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n/**\n * Synonym of Tooling#create()\n *\n * @method Tooling#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method Tooling#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Update records\n *\n * @method Tooling#update\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Upsert records\n *\n * @method Tooling#upsert\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method Tooling#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#describe()\n *\n * @method Tooling#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n/**\n * Describe SObject metadata\n *\n * @method Tooling#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe global SObjects\n *\n * @method Tooling#describeGlobal\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n/**\n * Get SObject instance\n *\n * @method Tooling#sobject\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n/**\n * @typedef {Object} Tooling~ExecuteAnonymousResult\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\n * @prop {String} compileProblem - Error reason in compilation\n * @prop {Boolean} success - Flag if the code is executed successfully\n * @prop {Number} line - Line number for the error\n * @prop {Number} column - Column number for the error\n * @prop {String} exceptionMessage - Exception message\n * @prop {String} exceptionStackTrace - Exception stack trace\n */\n/**\n * Executes Apex code anonymously\n *\n * @param {String} body - Anonymous Apex code\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.executeAnonymous = function(body, callback) {\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Tooling~CompletionsResult\n * @prop {Object} publicDeclarations\n */\n/**\n * Retrieves available code completions of the referenced type\n *\n * @param {String} [type] - completion type (default 'apex')\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~CompletionsResult>}\n */\nTooling.prototype.completions = function(type, callback) {\n  if (!_.isString(type)) {\n    callback = type;\n    type = 'apex';\n  }\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\n  return this.request(url).thenCall(callback);\n};\n\n\nmodule.exports = Tooling;\n\n},{}]},{},[1])(1)\n});"]}