{"version":3,"file":"jsforce-api-analytics.min.js","sources":["jsforce-api-analytics.js"],"names":["e","exports","module","define","amd","o","window","global","self","f","jsforce","modules","api","Analytics","t","n","r","s","u","a","require","i","Error","code","l","call","length",1,"_","ReportInstance","report","id","this","_report","_conn","prototype","retrieve","callback","conn","url","_baseUrl","join","request","thenCall","Report","describe","run","exec","execute","options","isFunction","details","params","method","metadata","headers","Content-Type","body","JSON","stringify","executeAsync","instance","instances","reports"],"mappings":"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","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var o;\"undefined\"!=typeof window?o=window:\"undefined\"!=typeof global?o=global:\"undefined\"!=typeof self&&(o=self);var f=o;f=f.jsforce||(f.jsforce={}),f=f.modules||(f.modules={}),f=f.api||(f.api={}),f.Analytics=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file Manages Salesforce Analytics API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\nvar _        = jsforce.require('underscore'),\n    Promise  = jsforce.require('./promise');\n\n/**\n * Report instance to retrieving asynchronously executed result\n *\n * @protected\n * @class Analytics~ReportInstance\n * @param {Analytics~Report} report - Report\n * @param {String} id - Report instance id\n */\nvar ReportInstance = function(report, id) {\n  this._report = report;\n  this._conn = report._conn;\n  this.id = id;\n};\n\n/**\n * Retrieve report result asynchronously executed\n *\n * @method Analytics~ReportInstance#retrieve\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReportInstance.prototype.retrieve = function(callback) {\n  var conn = this._conn,\n      report = this._report;\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\n  return conn.request(url).thenCall(callback);\n};\n\n/**\n * Report object in Analytics API\n *\n * @protected\n * @class Analytics~Report\n * @param {Connection} conn Connection\n */\nvar Report = function(conn, id) {\n  this._conn = conn;\n  this.id = id;\n};\n\n/**\n * Describe report metadata\n *\n * @method Analytics~Report#describe\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportMetadata>}\n */\nReport.prototype.describe = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Run report synchronously\n *\n * @method Analytics~Report#execute\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReport.prototype.run = \nReport.prototype.exec = \nReport.prototype.execute = function(options, callback) {\n  options = options || {};\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\n  if (options.details) {\n    url += \"?includeDetails=true\";\n  }\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\n  if (options.metadata) {\n    params.headers = { \"Content-Type\" : \"application/json\" };\n    params.body = JSON.stringify(options.metadata);\n  }\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Run report asynchronously\n *\n * @method Analytics~Report#executeAsync\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\n */\nReport.prototype.executeAsync = function(options, callback) {\n  options = options || {};\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\n  if (options.details) {\n    url += \"?includeDetails=true\";\n  }\n  var params = { method : 'POST', url : url, body: \"\" };\n  if (options.metadata) {\n    params.headers = { \"Content-Type\" : \"application/json\" };\n    params.body = JSON.stringify(options.metadata);\n  }\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Get report instance for specified instance ID\n *\n * @method Analytics~Report#instance\n * @param {String} id - Report instance ID\n * @returns {Analytics~ReportInstance}\n */\nReport.prototype.instance = function(id) {\n  return new ReportInstance(this, id);\n};\n\n/**\n * List report instances which had been executed asynchronously\n *\n * @method Analytics~Report#instances\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\n */\nReport.prototype.instances = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n\n/**\n * API class for Analytics API\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Analytics = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Get report object of Analytics API\n *\n * @param {String} id - Report Id\n * @returns {Analytics~Report}\n */\nAnalytics.prototype.report = function(id) {\n  return new Report(this._conn, id);\n};\n\n/**\n * Get recent report list\n *\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\n */\nAnalytics.prototype.reports = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\nmodule.exports = Analytics;\n\n},{}]},{},[1])(1)\n});"]}