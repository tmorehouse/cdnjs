{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 1ac365fad39d2238fce4","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./index.common.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_20__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","angular","version","window","formlyEval","scope","expression","modelValue","viewValue","isFunction","$eval","$viewValue","$modelValue","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","Object","getPrototypeOf","ngModule","formlyCustomValidation","formlyUtil","$q","isPromiseLike","obj","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","length","keys","Error","JSON","stringify","link","el","attrs","ctrl","validation","messages","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","value","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","message","directive","tests","$inject","formlyField","$http","$compile","$templateCache","formlyConfig","formlyValidationMessages","formlyUsability","formlyWarn","asHtml","wrapper","element","append","html","getFieldTemplate","getType","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","checkWrapper","promises","map","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","arrayify","getWrapper","getWrapperByType","typeWrappers","concat","defaultWrapper","apiCheck","getTemplateOptionsCount","templateOptions","checkAllowedProperties","restrict","transclude","model","fields","form","controller","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","simplifyLife","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","typeName","extraOptions","extendOptionsWithDefaults","extend","setFormControl","cleanUp","stopWaitingForDestroy","clearInterval","interval","noFormControl","maxTime","intervalTime","iterations","setInterval","formControl","$on","addModelWatcher","$watch","addShowMessagesWatcher","show","errorExistsAndShouldBeVisible","addValidationMessages","invokeControllers","opts","fieldType","to","setElementTemplate","templateEl","contents","apply","thusly","args","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","isArray","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toArray","arr","Array","from","_slice","prototype","slice","formlyForm","currentFormId","rootEl","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","displayName","originalListener","_len","originalArgs","_key","newResult","getFormlyError","ngModuleName","utils","formlyUsabilityProvider","setType","getError","checkType","extendTypeOptions","typeMap","overwriteOk","checkOverwrite","allowedTypeProperties","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeDefaultOptions","extendsCtrl","optionsCtrl","extendsFn","optionsFn","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","wrapperOptions","types","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","object","newValue","objectName","warn","wrappers","removeWrapperByName","removeWrappersForType","_this","disableWarnings","console","_this2","extras","disableNgModelAttrsManipulator","$get","provider","constant","formlyVersion","errorInfoSlug","getErrorMessage","toJson","url","errorsAndWarningsUrlPrefix","additionalInfo","formlyTransclude","context","filter","extraPropsJSON","allowedPropsJSON","addTemplateOptionValueMessage","prefix","suffix","alternate","templateOptionValue","addStringMessage","string","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltinAttributes","ngModelAttrs","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","bound","attribute","addIfNotPresent","modelEls","bothAttributeAndBound","expressionOnly","attributeOnly","item","propName","substr","toUpperCase","attr","noTouchy","querySelectorAll","modelOptions","getterSetter","run","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":";;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,YACA,kBAAAC,gBAAAC,IACAD,QAAA,WAAAJ,GACA,gBAAAC,SACAA,QAAA,SAAAD,EAAAG,QAAA,YAEAJ,EAAA,SAAAC,EAAAD,EAAA,UACCO,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAT,OAGA,IAAAC,GAAAS,EAAAD,IACAT,WACAW,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAW,QAAA,EAGAX,EAAAD,QAvBA,GAAAU,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASP,EAAQD,EAASQ,GEtDhC,YAEAP,GAAAD,QAAAQ,EAAA,IF4DM,SAASP,EAAQD,EAASQ,GG9DhC,YAIA,IAAAS,GAAAT,EAAA,GACAS,GAAAC,UACAD,EAAAE,OAAAF,SAEAhB,EAAAD,QAAAiB,GHoEM,SAAShB,EAAQD,EAASQ,GI5EhC,YAOA,SAAAY,GAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAP,GAAAQ,WAAAH,GACAA,EAAAE,GAAAD,IAAAF,GAEAA,EAAAK,MAAAJ,GACAK,WAAAH,GAAAD,EACAK,YAAAL,IAKA,QAAAM,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAE,IAOA,QANAA,GAAAF,EAAAG,SACAD,EAAA,YACGA,GAAAF,EAAAI,cACHF,EAAA,gBAGAH,EAAAG,EAAAF,EAAAK,IAAAJ,GAAAK,KAAA,KAIA,QAAAC,GAAAC,GACAtB,EAAAuB,QAAAC,UAAA,SAAAC,EAAAV,GACAA,GAGAf,EAAAuB,QAAAE,EAAA,SAAAC,EAAAC,GACA3B,EAAA4B,UAAAN,EAAAK,IAEOE,EAAAP,EAAAK,GAAAD,IACPL,EAAAC,EAAAK,GAAAD,GAFAJ,EAAAK,GAAA3B,EAAA8B,KAAAJ,OAQA,QAAAG,GAAAE,EAAAC,GACA,MAAAhC,GAAAiC,SAAAF,IAAA/B,EAAAiC,SAAAD,IAAAE,OAAAC,eAAAJ,KAAAG,OAAAC,eAAAH,GA5CA,GAAAhC,GAAAT,EAAA,EAEAP,GAAAD,SAAkBoB,aAAAS,aAAAS,qBJ6HZ,SAASrC,GKjIf,YAEAA,GAAAD,QAAA,SAAAqD,GAKA,QAAAC,GAAAC,EAAAC,GAyEA,QAAAC,GAAAC,GACA,MAAAA,IAAAzC,QAAAQ,WAAAiC,EAAAC,MAGA,QAAAC,GAAAC,GACA,GAAAC,IAAA,wBACAC,IAeA,IAdA9C,QAAAuB,QAAAqB,EAAA,SAAAG,EAAAC,GACA,IAAAhD,QAAAiD,SAAAF,GAAA,CAGA,GAAAG,KACAlD,SAAAuB,QAAAwB,EAAA,SAAAI,EAAAhC,GACA,KAAA0B,EAAAO,QAAAjC,IACA+B,EAAAG,KAAAlC,KAGA+B,EAAAI,SACAR,EAAAE,GAAAE,MAGAhB,OAAAqB,KAAAT,GAAAQ,OACA,SAAAE,QAAA,oEAAAX,EAAAzB,KAAA,iDAAAqC,KAAAC,UAAAZ,IAAA1B,KAAA,MA9FA,OACAnC,QAAA,UACA0E,KAAA,SAAAvD,EAAAwD,EAAAC,EAAAC,GACA,GAAAlB,GAAAxC,EAAAK,MAAAoD,EAAAxB,uBACA,IAAAO,EAAA,CAGAD,EAAAC,GACAxC,EAAAU,QAAAiD,WAAAC,SAAA5D,EAAAU,QAAAiD,WAAAC,YAGA,IAAAC,GAAAH,EAAAI,eAAA,iBAAAL,EAAAK,eAAA,aACAlE,SAAAuB,QAAAqB,EAAA,SAAAG,EAAAC,GAeA,QAAAmB,KACA,GAAAC,GAAAC,EAAA,gCACAP,GAAAM,GAAApB,GAAA,SAAA1C,EAAAC,GACA,GAAA+D,GAAAhC,EAAAnC,WAAAC,EAAA2C,EAAAzC,EAAAC,EACA,OAAA8D,GACA7B,EAAA8B,OAAA/B,EAAAgC,KAAAD,GAAA/B,EAAAiC,OAAAF,GAEAA,GAKA,QAAAG,KACA,GAAAC,GAAAC,MACAb,GAAAc,SAAAC,QAAA,SAAAtE,GACA,GAAAuE,GAAAxC,EAAAnC,WAAAC,EAAA2C,EAAAe,EAAAnD,YAAAJ,EAuBA,OAtBAiC,GAAAsC,IACAhB,EAAAiB,SAAAjB,EAAAiB,aACAjB,EAAAiB,SAAA/B,IAAA,EACA0B,EAAAI,EACAA,EAAApC,KAAA,WACAgC,IAAAI,GACAhB,EAAAkB,aAAAhC,GAAA,KAEiB,oBACjB0B,IAAAI,GACAhB,EAAAkB,aAAAhC,GAAA,KAEiB,sBACjB,IAAAd,OAAAqB,KAAAO,EAAAiB,UAAAzB,aACAQ,GAAAiB,eAEAjB,GAAAiB,SAAA/B,MAIAc,EAAAkB,aAAAhC,EAAA8B,GAEAvE,IApDA,GAAA0E,GAAAlC,EAAAkC,OACAA,KACA7E,EAAAU,QAAAiD,WAAAC,SAAAhB,GAAA,WACA,MAAAV,GAAAnC,WAAAC,EAAA6E,EAAAnB,EAAAnD,YAAAmD,EAAApD,cAGAqC,EAAA/C,QAAAiC,SAAAc,KAAA1C,WAAA0C,CACA,IAAAsB,IAAArE,QAAAiD,SAAAF,EACAkB,GACAE,IAEAM,SA7BArC,EAAA8C,UAAA,yBAAA7C,GAEAA,EAAA8C,MAAA,KAqGA9C,EAAA+C,SAAA,qBLwIM,SAASpG,EAAQD,EAASQ,GMlPhC,YAEA,IAAAS,GAAAT,EAAA,EAEAP,GAAAD,QAAA,SAAAqD,GAKA,QAAAiD,GAAAC,EAAA/C,EAAAgD,EAAAC,EAAAC,EAAAC,EAAApD,EAAAqD,EAAAC,GAoMA,QAAAC,GAAAjC,GACA,GAAAkC,GAAA9F,EAAA+F,QAAA,UACA,OAAAD,GAAAE,OAAApC,GAAAqC,OAGA,QAAAC,GAAApF,GACA,GAAAE,GAAAyE,EAAAU,QAAArF,EAAAE,MAAA,EAAAF,GACAG,EAAAH,EAAAG,UAAAD,KAAAC,SACAC,EAAAJ,EAAAI,aAAAF,KAAAE,WACA,KAAAD,IAAAC,EACA,KAAAyE,GAAAS,cAAA,qDAAAtF,EAAAE,KAAA,+BAAAF,EAEA,OAAAuF,GAAApF,GAAAC,GAAAD,GAIA,QAAAoF,GAAApF,EAAAqF,GACA,GAAAA,EAEO,CACP,GAAAC,IAA2BC,MAAAhB,EAC3B,OAAAF,GAAAmB,IAAAxF,EAAAsF,GAAA7D,KAAA,SAAAgE,GACA,MAAAA,GAAAC,OACS,kBAAAC,GACThB,EAAA,2EAAA3E,EAAA2F,KANA,MAAArE,GAAAgC,KAAAtD,GAWA,QAAA4F,GAAA/F,GACA,GAAAgF,GAAAgB,EAAAhG,EAEA,iBAAAG,GACA,IAAA6E,EAAAxC,OACA,MAAAf,GAAAgC,KAAAtD,EAGA6E,GAAAvE,QAAAoE,EAAAoB,aACA,IAAAC,GAAAlB,EAAAmB,IAAA,SAAAC,GACA,MAAAb,GAAAa,EAAAjG,UAAAiG,EAAAhG,aAAAgG,EAAAjG,WAEA,OAAAsB,GAAA4E,IAAAH,GAAAtE,KAAA,SAAA0E,GACAA,EAAA7F,QAAA,SAAA8F,EAAAtG,GACA4E,EAAA2B,qBAAAD,EAAAvB,EAAA/E,MAEAqG,EAAAG,SACA,IAAAC,GAAAJ,EAAAK,OAIA,OAHAL,GAAA7F,QAAA,SAAA8F,GACAG,EAAAE,EAAAF,EAAAH,KAEAK,EAAAF,EAAAvG,MAKA,QAAAyG,GAAA5B,EAAA7E,GACA,GAAA0G,GAAA3H,EAAA+F,QAAA,UACA4B,GAAA3B,OAAAF,EACA,IAAA8B,GAAAD,EAAAE,KAAA,oBAEA,OADAD,GAAAE,YAAA7G,GACA0G,EAAA1B,OAGA,QAAAa,GAAAhG,GACA,GAAAgF,GAAAhF,EAAAgF,OAEA,WAAAA,EACA,QAQAA,GAJAA,EAIAiC,EAAAjC,GAAAmB,IAAAxB,EAAAuC,YAFAD,EAAAtC,EAAAwC,iBAAAnH,EAAAE,MAMA,IAAAA,GAAAyE,EAAAU,QAAArF,EAAAE,MAAA,EAAAF,EACA,IAAAE,KAAA8E,QAAA,CACA,GAAAoC,GAAAH,EAAA/G,EAAA8E,SAAAmB,IAAAxB,EAAAuC,WACAlC,KAAAqC,OAAAD,GAIA,GAAAE,GAAA3C,EAAAuC,YAIA,OAHAI,IACAtC,EAAAzC,KAAA+E,GAEAtC,EAGA,QAAAuC,GAAAvH,GAcA,QAAAwH,GAAAxH,GACA,GAAAyH,GAAA,CAIA,OAHAA,IAAAvI,EAAA4B,UAAAd,EAAAG,UAAA,IACAsH,GAAAvI,EAAA4B,UAAAd,EAAAE,MAAA,IACAuH,GAAAvI,EAAA4B,UAAAd,EAAAI,aAAA,IAjBA,GAAAqH,GAAAD,EAAAxH,EACA,QAAAyH,EACA,KAAA5C,GAAAS,cAAA,wIAAAtF,EACO,IAAAyH,EAAA,EACP,KAAA5C,GAAAS,cAAA,wIAAAtF,EAIA,IAAA+B,IAAA,oOAEA,uCACA8C,GAAA6C,uBAAA3F,EAAA/B,GA5SA,OACA2H,SAAA,KACAC,YAAA,EACAtI,OACAU,QAAA,IACA6H,MAAA,IACA9H,OAAA,KACAE,MAAA,KACA6H,OAAA,KACAC,KAAA,MAEAC,YAAA,oDAAAC,EAAAC,EAAAC,EAAAC,GAsBA,QAAAC,KACAH,EAAA,WAEA,GAAAI,GAAAL,EAAAjI,QACAuI,EAAAC,GACAtJ,GAAAuB,QAAA6H,EAAAG,qBAAA,SAAAlJ,EAAAsB,GACA,GAAA6H,GAAAP,EAAAtH,GAAA8H,OACAC,EAAAnH,EAAAgC,KAAAjC,EAAAnC,WAAA4I,EAAA1I,EAAAgJ,GACAK,GAAAhH,KAAA,SAAA4B,GACAkF,EAAAJ,EAAA9E,SAMA,QAAAgF,GAAAK,GACA,MAAAZ,GAAAJ,OAAAI,EAAAjI,QAAAK,KAGAnB,EAAA4B,UAAA+H,KACAZ,EAAAJ,MAAAI,EAAAjI,QAAAK,KAAAwI,GAEAZ,EAAAJ,MAAAI,EAAAjI,QAAAK,MANA,OASA,QAAAyI,GAAA9I,GAEAwB,EAAAjB,iBAAAP,GACA6F,QACA4B,mBACAxE,gBAIA,QAAA8F,GAAA/I,EAAAE,GACAA,GACA8I,EAAAhJ,EAAAE,EAAA+I,eAEA,IAAAC,GAAAjC,EAAAjH,EAAAmJ,cAAA1C,SACAvH,GAAAuB,QAAAyI,EAAA,SAAAE,GACAJ,EAAAhJ,EAAA2E,EAAAU,QAAA+D,GAAA,EAAApJ,GAAAiJ,kBAIA,QAAAD,GAAAhJ,EAAAqJ,GACAA,IACAnK,EAAAQ,WAAA2J,KACAA,IAAArJ,IAEAwB,EAAAjB,iBAAAP,EAAAqJ,IAIA,QAAAC,GAAAtJ,EAAAC,GACAf,EAAAqK,OAAAvJ,GAEAK,IAAAL,EAAAK,KAAAJ,GAAA,EACAuD,MAAAgF,EACAH,mBAKA,QAAAmB,GAAAlK,EAAAU,GAwBA,QAAAyJ,KACAC,IACAC,cAAAC,GAzBA,IAAA5J,EAAA6J,cAAA,CAGA,GAAAH,GACAI,EAAA,IACAC,EAAA,EACAC,EAAA,EACAJ,EAAAK,YAAA,WAEA,GADAD,KACA9K,EAAA4B,UAAAd,EAAAK,KACA,MAAAoJ,IAEA,IAAAS,GAAA5K,EAAAyI,MAAAzI,EAAAyI,KAAAzI,EAAAV,GACAsL,IACAlK,EAAAkK,cACAT,KACaM,EAAAC,EAAAF,IACbhF,EAAA,iFAAAgF,EAAA,KAAAxK,GACAmK,MAEWM,EACXL,GAAApK,EAAA6K,IAAA,WAAAV,IAQA,QAAAW,GAAA9K,EAAAU,GACAA,EAAA6H,OACAvI,EAAA+K,OAAA,gBAAAhC,GAAA,GAIA,QAAAiC,GAAAhL,EAAAU,GACA,GAAAT,GAAA,2FACAD,GAAA+K,OAAA9K,EAAA,SAAAgL,GACAvK,EAAAiD,WAAAuH,8BAAAD,IAIA,QAAAE,GAAAzK,GACAA,EAAAiD,WAAAC,SAAAlD,EAAAiD,WAAAC,aACAhE,EAAAuB,QAAAmE,EAAA1B,SAAA,SAAA3D,EAAA2C,GACAlC,EAAAiD,WAAAC,SAAAhB,KACAlC,EAAAiD,WAAAC,SAAAhB,GAAA,SAAAzC,EAAAD,EAAAF,GACA,MAAAkC,GAAAnC,WAAAC,EAAAC,EAAAC,EAAAC,OAMA,QAAAiL,GAAApL,GACA,GAAAU,GAAA6D,SAAAnD,UAAA,MAAuDA,UAAA,GACvDR,EAAA2D,SAAAnD,UAAA,MAAoDA,UAAA,EACpDxB,GAAAuB,SAAAP,EAAA8H,WAAAhI,EAAAgI,YAAA,SAAAA,GACAA,GACAI,EAAAJ,GAAuCC,OAAA3I,MA/IvC,GAAAqL,GAAA1C,EAAAjI,QACA4K,EAAAD,EAAAzK,MAAAyE,EAAAU,QAAAsF,EAAAzK,KACA4I,GAAA6B,GACA5B,EAAA4B,EAAAC,GACArD,EAAAoD,GAEA1C,EAAArJ,GAAA4C,EAAA1B,WAAAmI,EAAAlI,OAAA4K,EAAA1C,EAAAhI,OAGAqJ,EAAAqB,EAAA1C,EAAAhI,OACAoI,IACAmB,EAAAvB,EAAA0C,GACAP,EAAAnC,EAAA0C,GACAL,EAAArC,EAAA0C,GACAF,EAAAE,GACAD,EAAAzC,EAAA0C,EAAAC,GAGA3C,EAAA4C,GAAA5C,EAAAjI,QAAAyH,kBAkIA5E,KAAA,SAAAvD,EAAAwD,GAQA,QAAAgI,GAAAC,GACAjI,EAAAqC,KAAAJ,EAAAgG,IACAtG,EAAA3B,EAAAkI,YAAA1L,GACAY,KAAA2C,MACA3C,EAAA2C,KAAAoI,MAAAC,EAAAC,GAEA7L,EAAAU,QAAA6C,MACAvD,EAAAU,QAAA6C,KAAAoI,MAAAC,EAAAC,GAIA,QAAAC,GAAAC,GACA,gBAAAlL,GACA,GAAAmL,GAAA7J,EAAAgC,KAAAtD,EAQA,OAPAjB,GAAAuB,QAAA4K,EAAA,SAAAE,GACAD,IAAA1J,KAAA,SAAAzB,GACA,MAAAsB,GAAAgC,KAAA8H,EAAApL,EAAAb,EAAAU,QAAAV,IAAAsC,KAAA,SAAA4J,GACA,MAAAtM,GAAAiD,SAAAqJ,KAAAzG,EAAAyG,SAIAF,GA5BA,GAAApL,GAAAZ,EAAAU,QAAAE,MAAAyE,EAAAU,QAAA/F,EAAAU,QAAAE,MACAiL,EAAAzK,UACAwK,EAAA5M,IACA8G,GAAA9F,EAAAU,SAAA4B,KAAAwJ,EAAAzG,EAAA8G,qBAAAC,aAAA9J,KAAAmE,EAAAzG,EAAAU,UAAA4B,KAAAwJ,EAAAzG,EAAA8G,qBAAAE,cAAA/J,KAAAkJ,GAAA,kBAAAhF,GACAhB,EAAA,qHAAAxF,EAAAU,QAAA8F,OAoJA,QAAAmB,GAAAtF,GAMA,MALAA,KAAAzC,EAAA0M,QAAAjK,GACAA,MACKA,IACLA,MAEAA,EApUAL,EAAA8C,UAAA,cAAAG,GAEAA,EAAAF,MAAA,KA0TAE,EAAAD,SAAA,kINkQM,SAASpG,GOnkBf,YAEAA,GAAAD,QAAA,SAAAqD,GACAA,EAAA8C,UAAA,+CAAA8D,EAAA2D,GAEA,OACAhJ,KAAA,SAAAvD,EAAA2F,EAAAlC,GACA,GAAA+I,GAAA,KACAhJ,EAAAmC,EAAA,GACA8G,EAAAF,EAAA,EACA9I,GAAAiJ,SAAA,uBAAAxI,GACA,SAAAA,EACA0E,EAAA,WACA4D,EAAAC,EAAAE,cACAnJ,EAAAoJ,WACanJ,EAAAoJ,WACF,UAAA3I,GACXuI,EAAAE,gBAAAnJ,IACAA,EAAAsJ,OACArJ,EAAAK,eAAA,YAAA0I,GACAA,EAAAI,kBPilBM,SAAShO,EAAQD,EAASQ,GQrmBhC,YAEA,IAAA4N,GAAA,SAAAC,GAA+B,MAAAC,OAAAX,QAAAU,KAAAC,MAAAC,KAAAF,IAE/BG,EAAAF,MAAAG,UAAAC,MACAzN,EAAAT,EAAA,EAEAP,GAAAD,QAAA,SAAAqD,GAKA,QAAAsL,GAAA/H,GACA,GAAAgI,GAAA,CACA,QACAlF,SAAA,IACAxH,SAAA,SAAA2C,EAAAC,GAEA,GAAA+J,GAAA/J,EAAA+J,QAAA,SACA,uBAAAA,EAAA,mlBAAkWA,EAAA,eAElWC,SAAA,EACAnF,YAAA,EACAtI,OACAwI,OAAA,IACAD,MAAA,KACAE,KAAA,MAEAC,YAAA,kBAAAC,GAcA,QAAA+E,GAAA1E,EAAArI,GACAqI,EAAAjI,IAAAiI,EAAAjI,KAAAJ,GAAA,EAGA,QAAAgN,GAAA3E,EAAArI,GACA,GAAAf,EAAA4B,UAAAwH,EAAA4E,SAAA,CAGA,GAAAC,GAAA7E,EAAA4E,OACAhO,GAAA0M,QAAAuB,KACAA,OAEAjO,EAAAuB,QAAA0M,EAAA,SAAAD,GACA,IAAAhO,EAAA4B,UAAAoM,EAAAE,UACA,KAAAvI,GAAAS,cAAA,oFAAAgD,EAEA,IAAA+E,GAAAC,EAAAJ,EAAA5E,EAAArI,GACAsN,EAAAC,EAAAN,EAAA5E,EAAArI,GAEAC,EAAAgN,EAAAhN,MAAA,QACAgN,GAAAO,aAAAxF,EAAA/H,GAAAmN,EAAAE,EAAAL,EAAAQ,cAIA,QAAAJ,GAAAJ,EAAA5E,EAAArI,GACA,GAAAoN,GAAAH,EAAA3N,YAAA,UAAA+I,EAAAjI,IAAA,IACA,IAAAnB,EAAAQ,WAAA2N,GAAA,CAGA,GAAAM,GAAAN,CACAA,GAAA,WACA,GAAAlC,GAAAyC,EAAA3C,MAAApH,QAAAqJ,EAAAjN,GAAAoH,OAAAoF,EAAA3N,KAAA4B,YACA,OAAAiN,GAAA1C,MAAApH,OAAAwI,EAAAlB,KAEAkC,EAAAQ,YAAA,yCAAAvF,EAAAjI,IAEA,MAAAgN,GAGA,QAAAG,GAAAN,EAAA5E,EAAArI,GACA,GAAAsN,GAAAL,EAAAE,QACA,IAAAlO,EAAAQ,WAAA6N,GAAA,CAGA,GAAAO,GAAAP,CACAA,GAAA,WACA,GAAApC,GAAAyC,EAAA3C,MAAApH,QAAAqJ,EAAAjN,GAAAoH,OAAAoF,EAAA3N,KAAA4B,YACA,OAAAoN,GAAA7C,MAAApH,OAAAwI,EAAAlB,KAEAoC,EAAAM,YAAA,uCAAAvF,EAAAjI,IAEA,MAAAkN,GAGA,QAAAK,GAAAV,EAAAjN,GACA,OAAA8N,GAAArN,UAAA8B,OAAAwL,EAAAzB,MAAAwB,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAoGF,EAAAE,EAAaA,IACjHD,EAAAC,EAAA,GAAAvN,UAAAuN,EAGA,QAAAhG,EAAAH,OAAA7H,IAAAoH,OAAAgF,EAAA2B,IAAAd,EAAAO,eAxEAxF,EAAAlI,OAAA,UAAA8M,IAEA3N,EAAAuB,QAAAwH,EAAAH,OAAAkF,GACA9N,EAAAuB,QAAAwH,EAAAH,OAAAmF,GAGAhF,EAAAoC,OAAA,iBAAA6D,GACAhP,EAAAuB,QAAAwH,EAAAH,OAAA,SAAAQ,GAEAA,EAAAD,gBAAAC,EAAAD,eAAA6F,OAES,KAgETrL,KAAA,SAAAvD,EAAAwD,EAAAC,GACA,GAAAA,EAAAK,eAAA,UACA,KAAAyB,GAAAsJ,eAAA,kFAEA,aAAApL,EAAAb,KAEA,KAAA2C,GAAAsJ,eAAA,+EAGA,KAAApL,EAAAK,eAAA,WAAA9D,EAAAuI,MACA,KAAAhD,GAAAsJ,eAAA,yDA1GA7M,EAAA8C,UAAA,aAAAwI,GAEAA,EAAAvI,MAAA,KA6GAuI,EAAAtI,SAAA,qBR4mBM,SAASpG,EAAQD,EAASQ,GSnuBhC,YAEAP,GAAAD,QAAA,SAAAqD,GACA7C,EAAA,GAAA6C,GACA7C,EAAA,GAAA6C,GACA7C,EAAA,GAAA6C,GACA7C,EAAA,GAAA6C,KT0uBM,SAASpD,EAAQD,EAASQ,GUhvBhC,YAEA,IAAA2P,GAAA,SACAlP,EAAAT,EAAA,GACA6C,EAAApC,EAAAhB,OAAAkQ,KAEA3P,GAAA,IAAA6C,GACA7C,EAAA,IAAA6C,GACA7C,EAAA,GAAA6C,GACA7C,EAAA,IAAA6C,GAEApD,EAAAD,QAAAmQ,GVsvBM,SAASlQ,EAAQD,EAASQ,GWjwBhC,YAEA,IAAAS,GAAAT,EAAA,GACA4P,EAAA5P,EAAA,EAEAP,GAAAD,QAAA,SAAAqD,GAKA,QAAAqD,GAAA2J,GAgCA,QAAAC,GAAAvO,GACA,GAAAd,EAAA0M,QAAA5L,GACAd,EAAAuB,QAAAT,EAAAuO,OACO,KAAArP,EAAAiC,SAAAnB,GAOP,KAAAwO,GAAA,kEAAA7L,KAAAC,UAAAlC,WANA+N,GAAAzO,GACAA,EAAA,YACA0O,EAAA1O,GAEA2O,EAAA3O,EAAAkC,MAAAlC,GAMA,QAAAyO,GAAAzO,GACA,IAAAA,EAAAkC,KACA,KAAAsM,GAAA,sDAAA7L,KAAAC,UAAAlC,WACO,MAAAV,EAAAiJ,gBAAAjJ,EAAAG,UAAAH,EAAAI,aAAAJ,EAAA,YACP,KAAAwO,GAAA,kHAAA7L,KAAAC,UAAAlC,WACO,IAAAV,EAAAG,UAAAH,EAAAI,YACP,KAAAoO,GAAA,sFAAA7L,KAAAC,UAAAlC,WAEAV,GAAA4O,kBAGA5O,GAAA4O,YAFAC,EAAA7O,EAAAkC,KAAAyM,EAAA3O,EAAA,SAIAsO,EAAA5G,uBAAAoH,EAAA9O,GAGA,QAAA0O,GAAA1O,GACA,GAAA+O,GAAA1J,EAAArF,EAAA,cAAAA,EACAgP,GAAAhP,EAAA+O,GACAE,EAAAjP,EAAA+O,GACAG,EAAAlP,EAAA+O,GACAV,EAAA9N,iBAAAP,EAAA+O,GAGA,QAAAC,GAAAhP,EAAA+O,GACA,GAAAI,GAAAJ,EAAA/G,UACA,IAAA9I,EAAA4B,UAAAqO,GAAA,CAGA,GAAAC,GAAApP,EAAAgI,UACA9I,GAAA4B,UAAAsO,IACApP,EAAAgI,WAAA,SAAAC,EAAAG,GACAA,EAAA+G,GAAoClH,WACpCG,EAAAgH,GAAoCnH,YAEpCjI,EAAAgI,WAAA1D,SAAA,yBAEAtE,EAAAgI,WAAAmH,GAIA,QAAAF,GAAAjP,EAAA+O,GACA,GAAAM,GAAAN,EAAAlM,IACA,IAAA3D,EAAA4B,UAAAuO,GAAA,CAGA,GAAAC,GAAAtP,EAAA6C,IAEA7C,GAAA6C,KADA3D,EAAA4B,UAAAwO,GACA,WACAD,EAAApE,MAAApH,OAAAnD,WACA4O,EAAArE,MAAApH,OAAAnD,YAGA2O,GAIA,QAAAH,GAAAlP,EAAA+O,GACA,GAAAQ,GAAAR,EAAA9F,cACA,IAAA/J,EAAA4B,UAAAyO,GAAA,CAGA,GAAAC,GAAAxP,EAAAiJ,eACAwG,EAAAvQ,EAAAQ,WAAA8P,GACAE,EAAAxQ,EAAAQ,WAAA6P,EACAG,GACA1P,EAAAiJ,eAAA,SAAAjJ,GACA,GAAA2P,GAAAJ,EAAAvP,EACA,OAAAyP,GACAD,EAAAG,IAEAtB,EAAA9N,iBAAAoP,EAAAH,GACAG,IAGOF,IACPzP,EAAAiJ,eAAA,SAAAjJ,GACA,GAAA4P,KAEA,OADAvB,GAAA9N,iBAAAqP,EAAA5P,EAAAuP,GACAC,EAAAI,MAKA,QAAAvK,GAAAnD,EAAA2N,EAAAC,GACA,IAAA5N,EACA,MAAA2B,OAEA,IAAA3D,GAAAyO,EAAAzM,EACA,IAAAhC,GAAA2P,KAAA,EAGA,MAAA3P,EAFA,MAAAsO,GAAA,oCAAAtM,EAAA,MAAAS,KAAAC,UAAAkN,IAMA,QAAAC,GAAA/P,EAAAkC,GACA,MAAAhD,GAAA0M,QAAA5L,GACAA,EAAAmG,IAAA,SAAA6J,GACA,MAAAD,GAAAC,KAEO9Q,EAAAiC,SAAAnB,IACPA,EAAAiQ,MAAAC,EAAAlQ,GACAA,EAAAkC,KAAAiO,EAAAnQ,EAAAkC,GACAkO,EAAApQ,GACAqQ,EAAArQ,EAAAkC,MAAAlC,EACAA,GACOd,EAAAiD,SAAAnC,GACP+P,GACA5P,SAAAH,EACAkC,SAHO,OAQP,QAAAgO,GAAAlQ,GACA,MAAAd,GAAAiD,SAAAnC,EAAAiQ,QACAjQ,EAAAiQ,OAEA/Q,EAAA4B,UAAAd,EAAAiQ,OAGAjQ,EAAAiQ,SAIA,QAAAE,GAAAnQ,EAAAkC,GACA,MAAAlC,GAAAkC,SAAAlC,EAAAiQ,MAAA3P,KAAA,MAAAgQ,EAGA,QAAAF,GAAApQ,GACAsO,EAAArI,aAAAjG,GACAA,EAAAG,UACAmO,EAAA9H,qBAAAxG,EAAAG,SAAAH,GAEAA,EAAA4O,kBAGA5O,GAAA4O,YAFAC,EAAA7O,EAAAkC,KAAAmO,EAAArQ,EAAA,oBAIAuQ,EAAAvQ,GAGA,QAAAuQ,GAAAvQ,GACA,GAAAwQ,IAAAtR,EAAA0M,QAAA5L,EAAAiQ,SAAAjQ,EAAAiQ,MAAAQ,MAAAvR,EAAAiD,SACA,IAAAqO,EACA,KAAAhC,GAAA,iGAIA,QAAAK,GAAA6B,EAAAC,EAAAC,EAAAC,GACAF,EAAAvN,eAAAsN,IACAI,GAAA,2BAAAJ,EAAA,OAAAG,EAAA,yBAAAlO,KAAAC,UAAA+N,EAAAD,IAAA,SAAA/N,KAAAC,UAAAgO,GAAA,qEAAAtQ,KAAA,MAIA,QAAA4G,GAAAhF,GACA,MAAAmO,GAAAnO,GAAAoO,GAGA,QAAAnJ,GAAAjH,GAEA,GAAA6Q,KACA,QAAA7O,KAAAmO,GACAA,EAAAjN,eAAAlB,IACAmO,EAAAnO,GAAA+N,OAAA,KAAAI,EAAAnO,GAAA+N,MAAA3N,QAAApC,IACA6Q,EAAAxO,KAAA8N,EAAAnO,GAIA,OAAA6O,GAGA,QAAAC,GAAA9O,GACA,GAAA8C,GAAAqL,EAAAnO,EAEA,cADAmO,GAAAnO,GACA8C,EAGA,QAAAiM,GAAA/Q,GACA,GAAA6Q,GAAA5J,EAAAjH,EACA,IAAA6Q,EAGA,MAAA7R,GAAA0M,QAAAmF,IAGAA,EAAAtQ,QAAA,SAAAuE,GACA,MAAAgM,GAAAhM,EAAA9C,QAEA6O,GALAC,EAAAD,EAAA7O,MAUA,QAAA4O,KACAI,EAAAC,iBACAC,QAAAN,KAAA7F,MAAAmG,QAAA1Q,WAlPA,GAAA2Q,GAAA/S,KAGAqQ,KACA0B,KACAC,EAAA,UACAY,EAAA5S,KACAkQ,EAAAF,EAAAH,eACAW,GAAA,gGAEA5P,GAAAqK,OAAAjL,MACAiQ,UACAlJ,UACA0K,aACA7I,aACAC,mBACA6J,sBACAC,wBACAE,iBAAA,EACAG,QACAC,gCAAA,GAEA9F,sBACAC,cACAC,gBAEA6F,KAAA,WACA,MAAAH,MAhCA/P,EAAAmQ,SAAA,eAAA9M,GAEAA,EAAAN,MAAA,KAyPAM,EAAAL,SAAA,6BX0wBM,SAASpG,GY3gCf,YAEAA,GAAAD,QAAA,SAAAqD,GACAA,EAAAoQ,SAAA,6GZkhCM,SAASxT,EAAQD,EAASQ,GarhChC,YAEA,IAAAS,GAAAT,EAAA,EAEAP,GAAAD,QAAA,SAAAqD,GACAA,EAAAmQ,SAAA,4CAAAE,GAcA,QAAArM,GAAAsM,EAAAzN,EAAAmE,GAMA,MALA5H,WAAA8B,OAAA,IACA8F,EAAAnE,EACAA,EAAAyN,EACAA,EAAA,MAEA,GAAAlP,OAAAmP,EAAAD,EAAAzN,IAAA,sBAAAjF,EAAA4S,OAAAxJ,KAGA,QAAA6F,GAAAyD,EAAAzN,GAKA,MAJAA,KACAA,EAAAyN,EACAA,EAAA,MAEA,GAAAlP,OAAAmP,EAAAD,EAAAzN,IAGA,QAAA0N,GAAAD,EAAAzN,GACA,GAAA4N,GAAA,EAIA,OAHA,QAAAH,IACAG,EAAA,GAAAC,EAAAJ,GAEA,iBAAAzN,EAAA,KAAA4N,EAGA,QAAA9L,GAAAjB,GACA,GAAAA,EAAA7E,UAAA6E,EAAA5E,YACA,KAAA+N,GAAA,wFAAAxL,KAAAC,UAAAoC,GAEA,KAAAA,EAAA7E,WAAA6E,EAAA5E,YACA,KAAA+N,GAAA,8FAAAxL,KAAAC,UAAAoC,IAIA,QAAAwB,GAAArG,EAAA8R,GACA,GAAAC,GAAA,yCACA,SAAA/R,EAAAmC,QAAA4P,GACA,KAAA/D,GAAA,wCAAA+D,EAAA,gGAAA/R,EAAA,6BAAAwC,KAAAC,UAAAqP,IAIA,QAAAvK,GAAA3F,EAAAJ,EAAAwQ,GACA,GAAA/P,GAAAhB,OAAAqB,KAAAd,GAAAyQ,OAAA,SAAAvR,GACA,WAAAkB,EAAAO,QAAAzB,IAEA,IAAAuB,EAAAI,OAAA,CACA,GAAA6P,GAAA1P,KAAAC,UAAAR,EAAA9B,KAAA,OACAgS,EAAA3P,KAAAC,UAAAb,EAAAzB,KAAA,MACA,MAAAgF,GAAA,uGAAA6M,EAAA,0BAAAE,EAAA,2BAAAC,GAAAhS,KAAA,MAAAqB,IA7DA,GAAAuP,GAAA5S,KACA0T,EAAA,oDAAAL,EAAA,gCACAzS,GAAAqK,OAAAjL,MACA6P,iBACA7I,gBACAW,eACAO,uBACAkB,yBACA8J,KAAA,WACA,MAAAN,WbolCM,SAAShT,GcnmCf,YAEAA,GAAAD,QAAA,SAAAqD,GACAA,EAAAtD,QAAA,sCASA,QAAAuU,GAAArQ,EAAArB,EAAA2R,EAAAC,EAAAC,GACA9N,EAAA1B,SAAAhB,GAAAyQ,EAAA9R,EAAA2R,EAAAC,EAAAC,GAGA,QAAAE,GAAA1Q,EAAA2Q,GACAjO,EAAA1B,SAAAhB,GAAA,WACA,MAAA2Q,IAKA,QAAAF,GAAA9R,EAAA2R,EAAAC,EAAAC,GACA,gBAAAjT,EAAAD,EAAAF,GACA,MAAAA,GAAAU,QAAAyH,gBAAA5G,GACA,GAAA2R,EAAA,IAAAlT,EAAAU,QAAAyH,gBAAA5G,GAAA,IAAA4R,EAEAC,GAxBA,GAAA9N,IACA2N,gCACAK,mBACA1P,YAGA,OAAA0B,OdgoCM,SAAS1G,Ge1oCf,YAEAA,GAAAD,QAAA,SAAAqD,GACAA,EAAAoQ,SAAA,2BfipCM,SAASxT,EAAQD,EAASQ,GgBppChC,YAEAP,GAAAD,QAAA,SAAAqD,GACA7C,EAAA,IAAA6C,GACA7C,EAAA,GAAA6C,GACA7C,EAAA,IAAA6C,GACA7C,EAAA,IAAA6C,GACA7C,EAAA,IAAA6C,KhB2pCM,SAASpD,GiBlqCf,YAEAA,GAAAD,QAAA,SAAAqD,GAGA,QAAAwR,GAAAnO,GACAA,EAAA2M,OAAAC,gCAGA5M,EAAA8G,qBAAAC,WAAAnJ,KAAAwQ,GAKA,QAAAA,GAAA5S,EAAAH,EAAAV,GA8BA,QAAA0T,KACA,GAAAhT,EAAAyH,iBAAAzH,EAAAyI,qBAAA,CAIA,GAAAoC,GAAA7K,EAAAyH,oBACAwL,EAAAjT,EAAAyI,yBAEAyK,EAAAC,GAGAjU,SAAAqK,OAAA2J,EAAAlT,EAAAoT,cAEAlU,QAAAuB,QAAAyS,EAAA,SAAAtS,EAAAsB,GAEA,GAAAmR,GAAAxP,OACAyP,EAAAzP,OACA0P,EAAA,4BAAArR,EAAA,KACAsR,EAAA3I,EAAA3I,GACAuR,EAAAC,EAAAT,EAAA/Q,GAEAyR,EAAAzU,QAAA4B,UAAA0S,GACAI,EAAA1U,QAAA4B,UAAA2S,EACA,IAAA7S,EAAA4C,MAEA8P,EAAA1S,EAAA4C,MACA6P,EAAAnR,MACS,IAAAtB,EAAArB,YAAAoU,EAET,GADAL,EAAA1S,EAAArB,WACAL,QAAAiD,SAAA0I,EAAA3I,IACAmR,EAAA,SAAAE,EAAA,QACW,KAAArU,QAAAQ,WAAAmL,EAAA3I,IAGX,SAAAQ,OAAA,2BAAAR,EAAA,kCAAAS,KAAAC,UAAA5C,GAFAqT,GAAA,GAAAE,EAAA,kDAIS3S,GAAAiT,OAAAD,GACTN,EAAA1S,EAAAiT,MACAR,EAAAE,GACS3S,EAAAkT,WAAAF,GACTN,EAAA1S,EAAAkT,UACAT,EAAA,KAAuBE,EAAA,MACd3S,EAAAkT,WAAAH,IACTL,EAAA1S,EAAAkT,UACAT,EAAAG,EAEAtU,SAAA4B,UAAAwS,IAAApU,QAAA4B,UAAAuS,IACAU,EAAAC,EAAAV,EAAAD,MAKA,QAAAF,KACA,GAAAD,IACAhH,OACA4H,UAAA,iBAGAG,GAAA,yDACAC,GAAA,8DACAC,GAAA,4CAcA,OAZAjV,SAAAuB,QAAAwT,EAAA,SAAAG,GACAlB,EAAAkB,IAAmCN,UAAAM,EAAAP,MAAA,MAAAO,KAGnClV,QAAAuB,QAAAyT,EAAA,SAAAE,GACA,GAAAC,GAAA,KAAAD,EAAAE,OAAA,KAAAC,cAAAH,EAAAE,OAAA,EACApB,GAAAmB,IAAuC9U,WAAA,MAAA6U,KAGvClV,QAAAuB,QAAA0T,EAAA,SAAAC,GACAlB,EAAAkB,IAAmCN,UAAAM,KAEnClB,EAGA,QAAAQ,GAAAT,EAAA/Q,GACA,MAAA+Q,GAAA,mBAAA/Q,IAAA+Q,EAAA,oBAAA/Q,EAAA,OAAA+Q,EAAA,oBAAA/Q,EAAA,MAGA,QAAA6R,GAAAjR,EAAA0R,EAAA5T,GACAkC,EAAA0R,SACA1R,EAAA0R,OAAA5T,GA/GA,GAAAkC,GAAA5D,QAAA+F,QAAA,WACAY,EAAA7F,EAAA6F,IACA,IAAAA,EAAA4O,SACA,MAAAtU,EAEA2C,GAAAoC,OAAA/E,EACA,IAAA6T,GAAA9U,QAAA+F,QAAAnC,EAAA,GAAA4R,iBAAA,cACA,OAAAV,MAAAxR,QAIAuR,EAAAC,EAAA,KAAA1U,EAAAV,IACAmV,EAAAC,EAAA,OAAA1U,EAAAV,IAEAM,QAAA4B,UAAAd,EAAA8B,aACAiS,EAAAC,EAAA,iDAEA9U,QAAA4B,UAAAd,EAAA2U,gBACAZ,EAAAC,EAAA,2CACAhU,EAAA2U,aAAAC,cACAZ,EAAAQ,KAAA,6BAGAxB,IAEAlQ,EAAAqC,QAjBAhF,EArBAmB,EAAAuT,IAAA/B,GAQAA,EAAAxO,SAAA,kBjBgyCM,SAASpG,EAAQD,EAASQ,GkB3yChC,YAEAP,GAAAD,QAAA,SAAAqD,GACA7C,EAAA,IAAA6C,KlBkzCM,SAASpD,EAAQD,EAASQ,GmBrzChC,YAEA,IAAA4P,GAAA5P,EAAA,EAEAP,GAAAD,QAAA,SAAAqD,GAKA,QAAAE,KACA,MAAA6M,GALA/M,EAAAtD,QAAA,aAAAwD,GAEAA,EAAA6C,MAAA,OnBg0CM,SAASnG,GoBv0Cf,YAEA,IAAAmO,GAAA,SAAAC,GAA+B,MAAAC,OAAAX,QAAAU,KAAAC,MAAAC,KAAAF,GAE/BpO,GAAAD,QAAA,SAAAqD,GACAA,EAAAtD,QAAA,+EAAA2G,EAAAmQ,EAAAC,GACA,kBACA,IAAApQ,EAAAwM,gBAAA,CACA,GAAAhG,GAAAoB,MAAAG,UAAAC,MAAA7N,KAAA4B,WACAsU,EAAA7J,EAAAxE,OACAwE,GAAApH,QAAA,mBACAoH,EAAA5I,KAAA,GAAAuS,EAAAE,GACAD,EAAAjE,KAAA7F,MAAA8J,EAAA1I,EAAAlB,WpBi1CM,SAASjN,EAAQD,EAASQ,GqB71ChC,YAEAP,GAAAD,QAAA,SAAAqD,GACA7C,EAAA,IAAA6C,GACA7C,EAAA,IAAA6C,KrBo2CM,SAASpD,GsBx2CfA,EAAAD,QAAAM","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_20__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_20__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = __webpack_require__(8);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(20);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge };\n\t\n\t\n\tfunction formlyEval(scope, expression, modelValue, viewValue) {\n\t  if (angular.isFunction(expression)) {\n\t    return expression(viewValue || modelValue, modelValue, scope);\n\t  } else {\n\t    return scope.$eval(expression, {\n\t      $viewValue: viewValue || modelValue,\n\t      $modelValue: modelValue\n\t    });\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = \"template\";\n\t  } else if (!type && options.templateUrl) {\n\t    type = \"templateUrl\";\n\t  }\n\t\n\t  return [formId, type, options.key, index].join(\"_\");\n\t}\n\t\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  angular.forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    angular.forEach(src, function (val, prop) {\n\t      if (!angular.isDefined(dest[prop])) {\n\t        dest[prop] = angular.copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\t\n\t  formlyCustomValidation.tests = false ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\t\n\t  function formlyCustomValidation(formlyUtil, $q) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t        checkValidators(validators);\n\t        scope.options.validation.messages = scope.options.validation.messages || {};\n\t\n\t\n\t        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          var message = validator.message;\n\t          if (message) {\n\t            scope.options.validation.messages[name] = function () {\n\t              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t            };\n\t          }\n\t          validator = angular.isObject(validator) ? validator.expression : validator;\n\t          var isPossiblyAsync = !angular.isString(validator);\n\t          if (useNewValidatorsApi) {\n\t            setupWithValidators();\n\t          } else {\n\t            setupWithParsers();\n\t          }\n\t\n\t          function setupWithValidators() {\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          }\n\t\n\t          function setupWithParsers() {\n\t            var inFlightValidator = undefined;\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              if (isPromiseLike(isValid)) {\n\t                ctrl.$pending = ctrl.$pending || {};\n\t                ctrl.$pending[name] = true;\n\t                inFlightValidator = isValid;\n\t                isValid.then(function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, true);\n\t                  }\n\t                })[\"catch\"](function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, false);\n\t                  }\n\t                })[\"finally\"](function () {\n\t                  if (Object.keys(ctrl.$pending).length === 1) {\n\t                    delete ctrl.$pending;\n\t                  } else {\n\t                    delete ctrl.$pending[name];\n\t                  }\n\t                });\n\t              } else {\n\t                ctrl.$setValidity(name, isValid);\n\t              }\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t\n\t    function checkValidators(validators) {\n\t      var allowedProperties = [\"expression\", \"message\"];\n\t      var validatorsWithExtraProps = {};\n\t      angular.forEach(validators, function (validator, name) {\n\t        if (angular.isString(validator)) {\n\t          return;\n\t        }\n\t        var extraProps = [];\n\t        angular.forEach(validator, function (v, key) {\n\t          if (allowedProperties.indexOf(key) === -1) {\n\t            extraProps.push(key);\n\t          }\n\t        });\n\t        if (extraProps.length) {\n\t          validatorsWithExtraProps[name] = extraProps;\n\t        }\n\t      });\n\t      if (Object.keys(validatorsWithExtraProps).length) {\n\t        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t      }\n\t    }\n\t  }\n\t  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n\t        var opts = $scope.options;\n\t        var fieldType = opts.type && formlyConfig.getType(opts.type);\n\t        simplifyLife(opts);\n\t        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n\t        apiCheck(opts);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\t\n\t        // initalization\n\t        extendOptionsWithDefaults(opts, $scope.index);\n\t        runExpressions();\n\t        setFormControl($scope, opts);\n\t        addModelWatcher($scope, opts);\n\t        addShowMessagesWatcher($scope, opts);\n\t        addValidationMessages(opts);\n\t        invokeControllers($scope, opts, fieldType);\n\t        // simplify things\n\t        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t        $scope.to = $scope.options.templateOptions;\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          $timeout(function () {\n\t            // must run on next tick to make sure that the current value is correct.\n\t            var field = $scope.options;\n\t            var currentValue = valueGetterSetter();\n\t            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t              var setter = $parse(prop).assign;\n\t              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t              promise.then(function (value) {\n\t                setter(field, value);\n\t              });\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function simplifyLife(options) {\n\t          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t          formlyUtil.reverseDeepMerge(options, {\n\t            data: {},\n\t            templateOptions: {},\n\t            validation: {}\n\t          });\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t          if (type) {\n\t            mergeOptions(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t\n\t        function mergeOptions(options, extraOptions) {\n\t          if (extraOptions) {\n\t            if (angular.isFunction(extraOptions)) {\n\t              extraOptions = extraOptions(options);\n\t            }\n\t            formlyUtil.reverseDeepMerge(options, extraOptions);\n\t          }\n\t        }\n\t\n\t        function extendOptionsWithDefaults(options, index) {\n\t          angular.extend(options, {\n\t            // attach the key in case the formly-field directive is used directly\n\t            key: options.key || index || 0,\n\t            value: valueGetterSetter,\n\t            runExpressions: runExpressions\n\t          });\n\t        }\n\t\n\t        // initialization functions\n\t        function setFormControl(scope, options) {\n\t          if (options.noFormControl) {\n\t            return;\n\t          }\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = setInterval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined(options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = scope.form && scope.form[scope.id];\n\t            if (formControl) {\n\t              options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            clearInterval(interval);\n\t          }\n\t        }\n\t\n\t        function addModelWatcher(scope, options) {\n\t          if (options.model) {\n\t            scope.$watch(\"options.model\", runExpressions, true);\n\t          }\n\t        }\n\t\n\t        function addShowMessagesWatcher(scope, options) {\n\t          var expression = \"options.formControl.$invalid && (options.formControl.$touched || options.validation.show)\";\n\t          scope.$watch(expression, function (show) {\n\t            options.validation.errorExistsAndShouldBeVisible = show;\n\t          });\n\t        }\n\t\n\t        function addValidationMessages(options) {\n\t          options.validation.messages = options.validation.messages || {};\n\t          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n\t            if (!options.validation.messages[name]) {\n\t              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n\t                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t              };\n\t            }\n\t          });\n\t        }\n\t\n\t        function invokeControllers(scope) {\n\t          var options = arguments[1] === undefined ? {} : arguments[1];\n\t          var type = arguments[2] === undefined ? {} : arguments[2];\n\t          angular.forEach([type.controller, options.controller], function (controller) {\n\t            if (controller) {\n\t              $controller(controller, { $scope: scope });\n\t            }\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n\t        var args = arguments;\n\t        var thusly = this;\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t          if (type && type.link) {\n\t            type.link.apply(thusly, args);\n\t          }\n\t          if (scope.options.link) {\n\t            scope.options.link.apply(thusly, args);\n\t          }\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper.length) {\n\t          return $q.when(template);\n\t        }\n\t\n\t        wrapper.forEach(formlyUsability.checkWrapper);\n\t        var promises = wrapper.map(function (w) {\n\t          return getTemplate(w.template || w.templateUrl, !w.template);\n\t        });\n\t        return $q.all(promises).then(function (wrappersTemplates) {\n\t          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t          });\n\t          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t          var totalWrapper = wrappersTemplates.shift();\n\t          wrappersTemplates.forEach(function (wrapperTemplate) {\n\t            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t          });\n\t          return doTransclusion(totalWrapper, template);\n\t        });\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t      superWrapper.append(wrapper);\n\t      var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t      transcludeEl.replaceWith(template);\n\t      return superWrapper.html();\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      var wrapper = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (wrapper === null) {\n\t        return [];\n\t      }\n\t\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!wrapper) {\n\t        // get all wrappers that specify they apply to this type\n\t        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t      } else {\n\t        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t      }\n\t\n\t      // get all wrappers for that this type specified that it uses.\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t\n\t      // add the default wrapper last\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      return wrapper;\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      // check that only allowed properties are provided\n\t      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\", \"validation\",\n\t      // things we add to the field after the fact are ok\n\t      \"formControl\", \"value\", \"runExpressions\"];\n\t      formlyUsability.checkAllowedProperties(allowedProperties, options);\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      link: function (scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  function formlyForm(formlyUsability) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: function (el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.rootEl || \"ng-form\";\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=?\", // we'll do our own warning to help with migrations\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function ($scope) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function (scope, el, attrs) {\n\t        if (attrs.hasOwnProperty(\"result\")) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n\t        }\n\t        if (attrs.name !== \"form\") {\n\t          // then they specified their own name\n\t          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n\t        }\n\t        // enforce the model attribute because we're making it optional to help with migrations\n\t        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\"];\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t  __webpack_require__(6)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(14)(ngModule);\n\t__webpack_require__(19)(ngModule);\n\t__webpack_require__(7)(ngModule);\n\t__webpack_require__(16)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this2 = this;\n\t\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t    var allowedTypeProperties = [\"name\", \"template\", \"templateUrl\", \"controller\", \"link\", \"defaultOptions\", \"extends\", \"wrapper\", \"data\"];\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      extras: {\n\t        disableNgModelAttrsManipulator: false\n\t      },\n\t      templateManipulators: {\n\t        preWrapper: [],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        if (options[\"extends\"]) {\n\t          extendTypeOptions(options);\n\t        }\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      if (!options.name) {\n\t        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n\t      } else if (!options.defaultOptions && !options.template && !options.templateUrl && !options[\"extends\"]) {\n\t        throw getError(\"You must provide defaultOptions, extends OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n\t      } else if (options.template && options.templateUrl) {\n\t        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      formlyUsabilityProvider.checkAllowedProperties(allowedTypeProperties, options);\n\t    }\n\t\n\t    function extendTypeOptions(options) {\n\t      var extendsType = getType(options[\"extends\"], true, options);\n\t      extendTypeControllerFunction(options, extendsType);\n\t      extendTypeLinkFunction(options, extendsType);\n\t      extendTypeDefaultOptions(options, extendsType);\n\t      utils.reverseDeepMerge(options, extendsType);\n\t    }\n\t\n\t    function extendTypeControllerFunction(options, extendsType) {\n\t      var extendsCtrl = extendsType.controller;\n\t      if (!angular.isDefined(extendsCtrl)) {\n\t        return;\n\t      }\n\t      var optionsCtrl = options.controller;\n\t      if (angular.isDefined(optionsCtrl)) {\n\t        options.controller = function ($scope, $controller) {\n\t          $controller(extendsCtrl, { $scope: $scope });\n\t          $controller(optionsCtrl, { $scope: $scope });\n\t        };\n\t        options.controller.$inject = [\"$scope\", \"$controller\"];\n\t      } else {\n\t        options.controller = extendsCtrl;\n\t      }\n\t    }\n\t\n\t    function extendTypeLinkFunction(options, extendsType) {\n\t      var extendsFn = extendsType.link;\n\t      if (!angular.isDefined(extendsFn)) {\n\t        return;\n\t      }\n\t      var optionsFn = options.link;\n\t      if (angular.isDefined(optionsFn)) {\n\t        options.link = function () {\n\t          extendsFn.apply(undefined, arguments);\n\t          optionsFn.apply(undefined, arguments);\n\t        };\n\t      } else {\n\t        options.link = extendsFn;\n\t      }\n\t    }\n\t\n\t    function extendTypeDefaultOptions(options, extendsType) {\n\t      var extendsDO = extendsType.defaultOptions;\n\t      if (!angular.isDefined(extendsDO)) {\n\t        return;\n\t      }\n\t      var optionsDO = options.defaultOptions;\n\t      var optionsDOIsFn = angular.isFunction(optionsDO);\n\t      var extendsDOIsFn = angular.isFunction(extendsDO);\n\t      if (extendsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var extendsDefaultOptions = extendsDO(options);\n\t          if (optionsDOIsFn) {\n\t            return optionsDO(extendsDefaultOptions);\n\t          } else {\n\t            utils.reverseDeepMerge(extendsDefaultOptions, optionsDO);\n\t            return extendsDefaultOptions;\n\t          }\n\t        };\n\t      } else if (optionsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var newDefaultOptions = {};\n\t          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n\t          return optionsDO(newDefaultOptions);\n\t        };\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      if (!name) {\n\t        return undefined;\n\t      }\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function setWrapper(options, name) {\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        return setWrapper({\n\t          template: options,\n\t          name: name\n\t        });\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      return wrappers;\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t\n\t\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", [\"formlyVersion\", function (formlyVersion) {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/blob/\" + formlyVersion + \"/other/ERRORS_AND_WARNINGS.md#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      checkAllowedProperties: checkAllowedProperties,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t\n\t    function checkAllowedProperties(allowedProperties, obj, context) {\n\t      var extraProps = Object.keys(obj).filter(function (prop) {\n\t        return allowedProperties.indexOf(prop) === -1;\n\t      });\n\t      if (extraProps.length) {\n\t        var extraPropsJSON = JSON.stringify(extraProps.join(\", \"));\n\t        var allowedPropsJSON = JSON.stringify(allowedProperties.join(\", \"));\n\t        throw getFieldError(\"you-have-specified-properties-for-context-that-are-not-allowed\", [\"You have specified properties for \" + context + \" that are not allowed: \" + extraPropsJSON, \"Allowed properties are: \" + allowedPropsJSON].join(\"\\n\"), obj);\n\t      }\n\t    }\n\t\n\t  }]);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyValidationMessages\", function () {\n\t    var formlyValidationMessages = {\n\t      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t      addStringMessage: addStringMessage,\n\t      messages: {}\n\t    };\n\t\n\t    return formlyValidationMessages;\n\t\n\t    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t    }\n\t\n\t    function addStringMessage(name, string) {\n\t      formlyValidationMessages.messages[name] = function () {\n\t        return string;\n\t      };\n\t    }\n\t\n\t\n\t    function templateOptionValue(prop, prefix, suffix, alternate) {\n\t      return function getValidationMessage(viewValue, modelValue, scope) {\n\t        if (scope.options.templateOptions[prop]) {\n\t          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t        } else {\n\t          return alternate;\n\t        }\n\t      };\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"3.2.0\"));\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(11)(ngModule);\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(12)(ngModule);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addFormlyNgModelAttrsManipulator);\n\t\n\t  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n\t    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t      return;\n\t    }\n\t    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t  }\n\t  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\t\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    /* jshint maxcomplexity:7 */\n\t    var el = angular.element(\"<a></a>\");\n\t    var data = options.data;\n\t    if (data.noTouchy) {\n\t      return template;\n\t    }\n\t    el.append(template);\n\t    var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n\t    if (!modelEls || !modelEls.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelEls, \"id\", scope.id);\n\t    addIfNotPresent(modelEls, \"name\", scope.id);\n\t\n\t    if (angular.isDefined(options.validators)) {\n\t      addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n\t    }\n\t    if (angular.isDefined(options.modelOptions)) {\n\t      addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n\t      if (options.modelOptions.getterSetter) {\n\t        modelEls.attr(\"ng-model\", \"options.value\");\n\t      }\n\t    }\n\t    addTemplateOptionsAttrs();\n\t\n\t    return el.html();\n\t\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltinAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      angular.forEach(ngModelAttributes, function (val, name) {\n\t        /* jshint maxcomplexity:9 */\n\t        var attrVal = undefined;\n\t        var attrName = undefined;\n\t        var ref = \"options.templateOptions['\" + name + \"']\";\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = angular.isDefined(toVal);\n\t        var inEp = angular.isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.expression && inTo) {\n\t          attrName = val.expression;\n\t          if (angular.isString(to[name])) {\n\t            attrVal = \"$eval(\" + ref + \")\";\n\t          } else if (angular.isFunction(to[name])) {\n\t            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t          } else {\n\t            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if (val.attribute && inEp) {\n\t          attrName = val.attribute;\n\t          attrVal = \"{{\" + ref + \"}}\";\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        }\n\t        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t          addIfNotPresent(modelEls, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t\n\t    function getBuiltinAttributes() {\n\t      var ngModelAttributes = {\n\t        focus: {\n\t          attribute: \"formly-focus\"\n\t        }\n\t      };\n\t      var bothAttributeAndBound = [\"required\", \"disabled\", \"pattern\", \"maxlength\", \"minlength\"];\n\t      var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t      var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t\n\t      angular.forEach(bothAttributeAndBound, function (item) {\n\t        ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(expressionOnly, function (item) {\n\t        var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t        ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(attributeOnly, function (item) {\n\t        ngModelAttributes[item] = { attribute: item };\n\t      });\n\t      return ngModelAttributes;\n\t    }\n\t\n\t    function getEpValue(ep, name) {\n\t      return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t    }\n\t\n\t    function addIfNotPresent(el, attr, val) {\n\t      if (!el.attr(attr)) {\n\t        el.attr(attr, val);\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(15)(ngModule);\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", formlyUtil);\n\t\n\t  formlyUtil.tests = false ? require(\"./formlyUtil.test\")(ngModule) : null;\n\t\n\t  function formlyUtil() {\n\t    return utils;\n\t  }\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(17)(ngModule);\n\t  __webpack_require__(18)(ngModule);\n\t};\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1ac365fad39d2238fce4\n **/","\"use strict\";\n\nmodule.exports = require(\"./index.common\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge };\n\n\nfunction formlyEval(scope, expression, modelValue, viewValue) {\n  if (angular.isFunction(expression)) {\n    return expression(viewValue || modelValue, modelValue, scope);\n  } else {\n    return scope.$eval(expression, {\n      $viewValue: viewValue || modelValue,\n      $modelValue: modelValue\n    });\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  var type = options.type;\n  if (!type && options.template) {\n    type = \"template\";\n  } else if (!type && options.templateUrl) {\n    type = \"templateUrl\";\n  }\n\n  return [formId, type, options.key, index].join(\"_\");\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, function (src, index) {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, function (val, prop) {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./other/utils.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\n  formlyCustomValidation.tests = ON_TEST ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\n  function formlyCustomValidation(formlyUtil, $q) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n        checkValidators(validators);\n        scope.options.validation.messages = scope.options.validation.messages || {};\n\n\n        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n        angular.forEach(validators, function (validator, name) {\n          var message = validator.message;\n          if (message) {\n            scope.options.validation.messages[name] = function () {\n              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n            };\n          }\n          validator = angular.isObject(validator) ? validator.expression : validator;\n          var isPossiblyAsync = !angular.isString(validator);\n          if (useNewValidatorsApi) {\n            setupWithValidators();\n          } else {\n            setupWithParsers();\n          }\n\n          function setupWithValidators() {\n            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          }\n\n          function setupWithParsers() {\n            var inFlightValidator = undefined;\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              if (isPromiseLike(isValid)) {\n                ctrl.$pending = ctrl.$pending || {};\n                ctrl.$pending[name] = true;\n                inFlightValidator = isValid;\n                isValid.then(function () {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, true);\n                  }\n                })[\"catch\"](function () {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                  }\n                })[\"finally\"](function () {\n                  if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                  } else {\n                    delete ctrl.$pending[name];\n                  }\n                });\n              } else {\n                ctrl.$setValidity(name, isValid);\n              }\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n\n    function checkValidators(validators) {\n      var allowedProperties = [\"expression\", \"message\"];\n      var validatorsWithExtraProps = {};\n      angular.forEach(validators, function (validator, name) {\n        if (angular.isString(validator)) {\n          return;\n        }\n        var extraProps = [];\n        angular.forEach(validator, function (v, key) {\n          if (allowedProperties.indexOf(key) === -1) {\n            extraProps.push(key);\n          }\n        });\n        if (extraProps.length) {\n          validatorsWithExtraProps[name] = extraProps;\n        }\n      });\n      if (Object.keys(validatorsWithExtraProps).length) {\n        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n      }\n    }\n  }\n  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n        var opts = $scope.options;\n        var fieldType = opts.type && formlyConfig.getType(opts.type);\n        simplifyLife(opts);\n        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n        apiCheck(opts);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\n        // initalization\n        extendOptionsWithDefaults(opts, $scope.index);\n        runExpressions();\n        setFormControl($scope, opts);\n        addModelWatcher($scope, opts);\n        addShowMessagesWatcher($scope, opts);\n        addValidationMessages(opts);\n        invokeControllers($scope, opts, fieldType);\n        // simplify things\n        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n        $scope.to = $scope.options.templateOptions;\n\n        // function definitions\n        function runExpressions() {\n          $timeout(function () {\n            // must run on next tick to make sure that the current value is correct.\n            var field = $scope.options;\n            var currentValue = valueGetterSetter();\n            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n              var setter = $parse(prop).assign;\n              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n              promise.then(function (value) {\n                setter(field, value);\n              });\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function simplifyLife(options) {\n          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n          formlyUtil.reverseDeepMerge(options, {\n            data: {},\n            templateOptions: {},\n            validation: {}\n          });\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options, type) {\n          if (type) {\n            mergeOptions(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, function (typeName) {\n            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n\n        function mergeOptions(options, extraOptions) {\n          if (extraOptions) {\n            if (angular.isFunction(extraOptions)) {\n              extraOptions = extraOptions(options);\n            }\n            formlyUtil.reverseDeepMerge(options, extraOptions);\n          }\n        }\n\n        function extendOptionsWithDefaults(options, index) {\n          angular.extend(options, {\n            // attach the key in case the formly-field directive is used directly\n            key: options.key || index || 0,\n            value: valueGetterSetter,\n            runExpressions: runExpressions\n          });\n        }\n\n        // initialization functions\n        function setFormControl(scope, options) {\n          if (options.noFormControl) {\n            return;\n          }\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = setInterval(function () {\n            iterations++;\n            if (!angular.isDefined(options.key)) {\n              return cleanUp();\n            }\n            var formControl = scope.form && scope.form[scope.id];\n            if (formControl) {\n              options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            clearInterval(interval);\n          }\n        }\n\n        function addModelWatcher(scope, options) {\n          if (options.model) {\n            scope.$watch(\"options.model\", runExpressions, true);\n          }\n        }\n\n        function addShowMessagesWatcher(scope, options) {\n          var expression = \"options.formControl.$invalid && (options.formControl.$touched || options.validation.show)\";\n          scope.$watch(expression, function (show) {\n            options.validation.errorExistsAndShouldBeVisible = show;\n          });\n        }\n\n        function addValidationMessages(options) {\n          options.validation.messages = options.validation.messages || {};\n          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n            if (!options.validation.messages[name]) {\n              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n              };\n            }\n          });\n        }\n\n        function invokeControllers(scope) {\n          var options = arguments[1] === undefined ? {} : arguments[1];\n          var type = arguments[2] === undefined ? {} : arguments[2];\n          angular.forEach([type.controller, options.controller], function (controller) {\n            if (controller) {\n              $controller(controller, { $scope: scope });\n            }\n          });\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n        var args = arguments;\n        var thusly = this;\n        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n        });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n          if (type && type.link) {\n            type.link.apply(thusly, args);\n          }\n          if (scope.options.link) {\n            scope.options.link.apply(thusly, args);\n          }\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, function (manipulator) {\n              chain = chain.then(function (template) {\n                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element(\"<a></a>\");\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      var type = formlyConfig.getType(options.type, true, options);\n      var template = options.template || type && type.template;\n      var templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(template, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      var wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper.length) {\n          return $q.when(template);\n        }\n\n        wrapper.forEach(formlyUsability.checkWrapper);\n        var promises = wrapper.map(function (w) {\n          return getTemplate(w.template || w.templateUrl, !w.template);\n        });\n        return $q.all(promises).then(function (wrappersTemplates) {\n          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n          });\n          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n          var totalWrapper = wrappersTemplates.shift();\n          wrappersTemplates.forEach(function (wrapperTemplate) {\n            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n          });\n          return doTransclusion(totalWrapper, template);\n        });\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n      superWrapper.append(wrapper);\n      var transcludeEl = superWrapper.find(\"formly-transclude\");\n      transcludeEl.replaceWith(template);\n      return superWrapper.html();\n    }\n\n    function getWrapperOption(options) {\n      var wrapper = options.wrapper;\n      // explicit null means no wrapper\n      if (wrapper === null) {\n        return [];\n      }\n\n      // nothing specified means use the default wrapper for the type\n      if (!wrapper) {\n        // get all wrappers that specify they apply to this type\n        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n      } else {\n        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n      }\n\n      // get all wrappers for that this type specified that it uses.\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n\n      // add the default wrapper last\n      var defaultWrapper = formlyConfig.getWrapper();\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      return wrapper;\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      // check that only allowed properties are provided\n      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\", \"validation\",\n      // things we add to the field after the fact are ok\n      \"formControl\", \"value\", \"runExpressions\"];\n      formlyUsability.checkAllowedProperties(allowedProperties, options);\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      link: function (scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe(\"formlyFocus\", function (value) {\n          if (value === \"true\") {\n            $timeout(function () {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~ ~attrs.focusWait);\n          } else if (value === \"false\") {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-focus.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", formlyForm);\n\n  formlyForm.tests = ON_TEST ? require(\"./formly-form.test\")(ngModule) : null;\n\n  function formlyForm(formlyUsability) {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: function (el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        var rootEl = attrs.rootEl || \"ng-form\";\n        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=?\", // we'll do our own warning to help with migrations\n        form: \"=?\"\n      },\n      controller: [\"$scope\", function ($scope) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }],\n      link: function (scope, el, attrs) {\n        if (attrs.hasOwnProperty(\"result\")) {\n          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n        }\n        if (attrs.name !== \"form\") {\n          // then they specified their own name\n          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n        }\n        // enforce the model attribute because we're making it optional to help with migrations\n        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n        }\n      }\n    };\n  }\n  formlyForm.$inject = [\"formlyUsability\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n  require(\"./formly-focus\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\nvar angular = require(\"./angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\nrequire(\"./run\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.common.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\nvar utils = require(\"../other/utils\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this2 = this;\n\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = \"default\";\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n    var allowedTypeProperties = [\"name\", \"template\", \"templateUrl\", \"controller\", \"link\", \"defaultOptions\", \"extends\", \"wrapper\", \"data\"];\n\n    angular.extend(this, {\n      setType: setType,\n      getType: getType,\n      setWrapper: setWrapper,\n      getWrapper: getWrapper,\n      getWrapperByType: getWrapperByType,\n      removeWrapperByName: removeWrapperByName,\n      removeWrappersForType: removeWrappersForType,\n      disableWarnings: false,\n      extras: {\n        disableNgModelAttrsManipulator: false\n      },\n      templateManipulators: {\n        preWrapper: [],\n        postWrapper: []\n      },\n      $get: function () {\n        return _this2;\n      }\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        if (options[\"extends\"]) {\n          extendTypeOptions(options);\n        }\n        typeMap[options.name] = options;\n      } else {\n        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n      }\n    }\n\n    function checkType(options) {\n      if (!options.name) {\n        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n      } else if (!options.defaultOptions && !options.template && !options.templateUrl && !options[\"extends\"]) {\n        throw getError(\"You must provide defaultOptions, extends OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n      } else if (options.template && options.templateUrl) {\n        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, \"types\");\n      } else {\n        delete options.overwriteOk;\n      }\n      formlyUsabilityProvider.checkAllowedProperties(allowedTypeProperties, options);\n    }\n\n    function extendTypeOptions(options) {\n      var extendsType = getType(options[\"extends\"], true, options);\n      extendTypeControllerFunction(options, extendsType);\n      extendTypeLinkFunction(options, extendsType);\n      extendTypeDefaultOptions(options, extendsType);\n      utils.reverseDeepMerge(options, extendsType);\n    }\n\n    function extendTypeControllerFunction(options, extendsType) {\n      var extendsCtrl = extendsType.controller;\n      if (!angular.isDefined(extendsCtrl)) {\n        return;\n      }\n      var optionsCtrl = options.controller;\n      if (angular.isDefined(optionsCtrl)) {\n        options.controller = function ($scope, $controller) {\n          $controller(extendsCtrl, { $scope: $scope });\n          $controller(optionsCtrl, { $scope: $scope });\n        };\n        options.controller.$inject = [\"$scope\", \"$controller\"];\n      } else {\n        options.controller = extendsCtrl;\n      }\n    }\n\n    function extendTypeLinkFunction(options, extendsType) {\n      var extendsFn = extendsType.link;\n      if (!angular.isDefined(extendsFn)) {\n        return;\n      }\n      var optionsFn = options.link;\n      if (angular.isDefined(optionsFn)) {\n        options.link = function () {\n          extendsFn.apply(undefined, arguments);\n          optionsFn.apply(undefined, arguments);\n        };\n      } else {\n        options.link = extendsFn;\n      }\n    }\n\n    function extendTypeDefaultOptions(options, extendsType) {\n      var extendsDO = extendsType.defaultOptions;\n      if (!angular.isDefined(extendsDO)) {\n        return;\n      }\n      var optionsDO = options.defaultOptions;\n      var optionsDOIsFn = angular.isFunction(optionsDO);\n      var extendsDOIsFn = angular.isFunction(extendsDO);\n      if (extendsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          var extendsDefaultOptions = extendsDO(options);\n          if (optionsDOIsFn) {\n            return optionsDO(extendsDefaultOptions);\n          } else {\n            utils.reverseDeepMerge(extendsDefaultOptions, optionsDO);\n            return extendsDefaultOptions;\n          }\n        };\n      } else if (optionsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          var newDefaultOptions = {};\n          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n          return optionsDO(newDefaultOptions);\n        };\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      if (!name) {\n        return undefined;\n      }\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n      } else {\n        return type;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name: name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      return wrappers;\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach(function (wrapper) {\n          return removeWrapperByName(wrapper.name);\n        });\n        return wrappers;\n      }\n    }\n\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn.apply(console, arguments);\n      }\n    }\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", [\"formlyVersion\", function (formlyVersion) {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/blob/\" + formlyVersion + \"/other/ERRORS_AND_WARNINGS.md#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      checkAllowedProperties: checkAllowedProperties,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n\n    function checkAllowedProperties(allowedProperties, obj, context) {\n      var extraProps = Object.keys(obj).filter(function (prop) {\n        return allowedProperties.indexOf(prop) === -1;\n      });\n      if (extraProps.length) {\n        var extraPropsJSON = JSON.stringify(extraProps.join(\", \"));\n        var allowedPropsJSON = JSON.stringify(allowedProperties.join(\", \"));\n        throw getFieldError(\"you-have-specified-properties-for-context-that-are-not-allowed\", [\"You have specified properties for \" + context + \" that are not allowed: \" + extraPropsJSON, \"Allowed properties are: \" + allowedPropsJSON].join(\"\\n\"), obj);\n      }\n    }\n\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyValidationMessages\", function () {\n    var formlyValidationMessages = {\n      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n      addStringMessage: addStringMessage,\n      messages: {}\n    };\n\n    return formlyValidationMessages;\n\n    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n    }\n\n    function addStringMessage(name, string) {\n      formlyValidationMessages.messages[name] = function () {\n        return string;\n      };\n    }\n\n\n    function templateOptionValue(prop, prefix, suffix, alternate) {\n      return function getValidationMessage(viewValue, modelValue, scope) {\n        if (scope.options.templateOptions[prop]) {\n          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n        } else {\n          return alternate;\n        }\n      };\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyValidationMessages.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n  require(\"./formlyValidationMessages\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 14\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.run(addFormlyNgModelAttrsManipulator);\n\n  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n      return;\n    }\n    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n  }\n  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    /* jshint maxcomplexity:7 */\n    var el = angular.element(\"<a></a>\");\n    var data = options.data;\n    if (data.noTouchy) {\n      return template;\n    }\n    el.append(template);\n    var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n    if (!modelEls || !modelEls.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelEls, \"id\", scope.id);\n    addIfNotPresent(modelEls, \"name\", scope.id);\n\n    if (angular.isDefined(options.validators)) {\n      addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n    }\n    if (angular.isDefined(options.modelOptions)) {\n      addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n      if (options.modelOptions.getterSetter) {\n        modelEls.attr(\"ng-model\", \"options.value\");\n      }\n    }\n    addTemplateOptionsAttrs();\n\n    return el.html();\n\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      var to = options.templateOptions || {};\n      var ep = options.expressionProperties || {};\n\n      var ngModelAttributes = getBuiltinAttributes();\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n      angular.forEach(ngModelAttributes, function (val, name) {\n        /* jshint maxcomplexity:9 */\n        var attrVal = undefined;\n        var attrName = undefined;\n        var ref = \"options.templateOptions['\" + name + \"']\";\n        var toVal = to[name];\n        var epVal = getEpValue(ep, name);\n\n        var inTo = angular.isDefined(toVal);\n        var inEp = angular.isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.expression && inTo) {\n          attrName = val.expression;\n          if (angular.isString(to[name])) {\n            attrVal = \"$eval(\" + ref + \")\";\n          } else if (angular.isFunction(to[name])) {\n            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n          } else {\n            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if (val.attribute && inEp) {\n          attrName = val.attribute;\n          attrVal = \"{{\" + ref + \"}}\";\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        }\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelEls, attrName, attrVal);\n        }\n      });\n    }\n\n    function getBuiltinAttributes() {\n      var ngModelAttributes = {\n        focus: {\n          attribute: \"formly-focus\"\n        }\n      };\n      var bothAttributeAndBound = [\"required\", \"disabled\", \"pattern\", \"maxlength\", \"minlength\"];\n      var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n      var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\n      angular.forEach(bothAttributeAndBound, function (item) {\n        ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n      });\n\n      angular.forEach(expressionOnly, function (item) {\n        var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n        ngModelAttributes[propName] = { expression: \"ng-\" + item };\n      });\n\n      angular.forEach(attributeOnly, function (item) {\n        ngModelAttributes[item] = { attribute: item };\n      });\n      return ngModelAttributes;\n    }\n\n    function getEpValue(ep, name) {\n      return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n    }\n\n    function addIfNotPresent(el, attr, val) {\n      if (!el.attr(attr)) {\n        el.attr(attr, val);\n      }\n    }\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./run/formlyNgModelAttrsManipulator.js\n ** module id = 15\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyNgModelAttrsManipulator\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./run/index.js\n ** module id = 16\n ** module chunks = 0\n **/","\"use strict\";\n\nvar utils = require(\"../other/utils\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", formlyUtil);\n\n  formlyUtil.tests = ON_TEST ? require(\"./formlyUtil.test\")(ngModule) : null;\n\n  function formlyUtil() {\n    return utils;\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 17\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 18\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 20\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}