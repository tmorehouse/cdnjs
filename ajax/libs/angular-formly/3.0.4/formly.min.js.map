{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap e1e7ceeb76ccba537246","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_15__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ngModuleName","angular","ngModule","version","window","directive","formlyUtil","$q","isPromiseLike","obj","isFunction","then","link","scope","el","attrs","ctrl","validators","$eval","formlyCustomValidation","hasValidators","hasOwnProperty","forEach","validator","name","isPossiblyAsync","isString","validatorCollection","modelValue","viewValue","value","formlyEval","when","reject","$parsers","unshift","isValid","$modelValue","$setValidity","formlyField","$http","$compile","$templateCache","formlyConfig","formlyUsability","formlyWarn","asHtml","wrapper","element","append","html","getFieldTemplate","options","type","getType","template","templateUrl","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","isArray","checkWrapper","promises","map","w","all","wrappersTemplates","wrapperTemplate","index","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","t","wrapperEl","transcludeEl","find","replaceWith","templateOption","getWrapper","wrapperName","getWrapperByType","arrayify","defaultWrapper","typeWrappers","concat","push","length","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","allowedProperties","extraProps","Object","keys","filter","prop","indexOf","JSON","stringify","join","restrict","transclude","model","formId","fields","form","controller","$scope","$interval","$parse","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","expression","setter","assign","promise","newVal","key","setFormControl","cleanUp","stopWaitingForDestroy","cancel","interval","maxTime","intervalTime","iterations","formControl","$on","mergeFieldOptionsWithTypeDefaults","defaultOptions","reverseDeepMerge","properOrder","optionsTypes","typeName","getFieldId","extend","modelOptions","getterSetter","allowInvalid","noFormControl","$watch","setElementTemplate","templateEl","contents","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","tests","$inject","$timeout","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toArray","arr","Array","from","_slice","prototype","slice","formlyForm","currentFormId","rootEl","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","args","modifyArgs","apply","undefined","arguments","displayName","originalListener","_len","originalArgs","_key","newResult","getFormlyError","formlyUsabilityProvider","setType","isObject","getError","checkType","typeMap","throwError","errorContext","overwriteOk","checkOverwrite","setWrapper","wrapperOptions","types","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","object","newValue","objectName","warn","wrappers","removeWrapperByName","removeWrappersForType","ngModelAttrsManipulator","addTemplateOptionsAttrs","boundAttributes","ngModelBoundAttributes","ng-disabled","ng-required","ng-pattern","ng-maxlength","ng-minlength","ng-change","ng-keydown","ng-keyup","ng-keypress","attributes","ngModelAttributes","formly-focus","placeholder","min","max","tabindex","addDefinedAttributes","modelEls","addNgModelAttrs","ngModelAttrs","bound","val","attr","addIfNotPresent","unbound","els","isExpression","to","ep","valPrefix","valSuffix","attrName","noTouchy","querySelectorAll","_this","disableWarnings","console","_this2","$get","provider","constant","errorInfoSlug","message","Error","getErrorMessage","toJson","url","errorsAndWarningsUrlPrefix","additionalInfo","formlyTransclude","$viewValue","realRes","res","src","getPrototypeOf","objectPrototype","arrayPrototype","deepRes","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":";;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,YACA,kBAAAC,gBAAAC,IACAD,QAAA,WAAAJ,GACA,gBAAAC,SACAA,QAAA,SAAAD,EAAAG,QAAA,YAEAJ,EAAA,SAAAC,EAAAD,EAAA,UACCO,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAT,OAGA,IAAAC,GAAAS,EAAAD,IACAT,WACAW,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAW,QAAA,EAGAX,EAAAD,QAvBA,GAAAU,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASP,EAAQD,EAASQ,GEtDhC,YAEA,IAAAS,GAAA,SAEAC,EAAAV,EAAA,GACAW,EAAAD,EAAAjB,OAAAgB,KAEAT,GAAA,IAAAW,GACAX,EAAA,IAAAW,GACAX,EAAA,GAAAW,GAEAlB,EAAAD,QAAAiB,GF4DM,SAAShB,EAAQD,EAASQ,GGvEhC,YAIA,IAAAU,GAAAV,EAAA,GACAU,GAAAE,UACAF,EAAAG,OAAAH,SAEAjB,EAAAD,QAAAkB,GH6EM,SAASjB,GIrFf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAAG,UAAA,qDAAAC,EAAAC,GAiCA,QAAAC,GAAAC,GACA,MAAAA,IAAAR,QAAAS,WAAAD,EAAAE,MAjCA,OACA1B,QAAA,UACA2B,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAJ,EAAAK,MAAAH,EAAAI,uBACA,IAAAF,EAAA,CAKA,GAAAG,GAAAJ,EAAAK,eAAA,cACApB,SAAAqB,QAAAL,EAAA,SAAAM,EAAAC,GACA,GAAAJ,EAAA,CACA,GAAAK,IAAAxB,QAAAyB,SAAAH,GACAI,EAAAF,EAAA,gCACAT,GAAAW,GAAAH,GAAA,SAAAI,EAAAC,GACA,GAAAC,GAAAxB,EAAAyB,WAAAlB,EAAAU,EAAAK,EAAAC,EACA,OAAAJ,GACAjB,EAAAsB,OAAAvB,EAAAyB,KAAAF,GAAAvB,EAAA0B,OAAAH,GAEAA,OAIAd,GAAAkB,SAAAC,QAAA,SAAAN,GACA,GAAAO,GAAA9B,EAAAyB,WAAAlB,EAAAU,EAAAP,EAAAqB,YAAAR,EAEA,OADAb,GAAAsB,aAAAd,EAAAY,GACAP,cJqGM,SAAS7C,EAAQD,EAASQ,GKnIhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAAqC,GAAAC,EAAAjC,EAAAkC,EAAAC,EAAAC,EAAArC,EAAAsC,EAAAC,GA8HA,QAAAC,GAAAhC,GACA,GAAAiC,GAAA9C,EAAA+C,QAAA,UACA,OAAAD,GAAAE,OAAAnC,GAAAoC,OAGA,QAAAC,GAAAC,GACA,GAAAC,GAAAV,EAAAW,QAAAF,EAAAC,MAAA,EAAAD,GACAG,EAAAH,EAAAG,UAAAF,KAAAE,SACAC,EAAAJ,EAAAI,aAAAH,KAAAG,WACA,KAAAD,IAAAC,EACA,KAAAZ,GAAAa,cAAA,qDAAAL,EAAAC,KAAA,+BAAAD,EAEA,OAAAM,GAAAH,GAAAC,GAAAD,GAIA,QAAAG,GAAAH,EAAAI,GACA,GAAAA,EAEO,CACP,GAAAC,IAA2BC,MAAAnB,EAC3B,OAAAF,GAAAsB,IAAAP,EAAAK,GAAAjD,KAAA,SAAAoD,GACA,MAAAA,GAAAC,OACS,kBAAAC,GACTpB,EAAA,2EAAAU,EAAAU,KANA,MAAA1D,GAAAyB,KAAAuB,GAWA,QAAAW,GAAAd,GACA,GAAAL,GAAAoB,EAAAf,EAEA,iBAAAG,GACA,GAAAR,EAES,IAAA9C,EAAAmE,QAAArB,GAAA,CACTA,EAAAzB,QAAAsB,EAAAyB,aACA,IAAAC,GAAAvB,EAAAwB,IAAA,SAAAC,GACA,MAAAd,GAAAc,EAAAjB,UAAAiB,EAAAhB,aAAAgB,EAAAjB,WAEA,OAAAhD,GAAAkE,IAAAH,GAAA3D,KAAA,SAAA+D,GACAA,EAAApD,QAAA,SAAAqD,EAAAC,GACAhC,EAAAiC,qBAAAF,EAAA5B,EAAA6B,MAEAF,EAAAI,SACA,IAAAC,GAAAL,EAAAM,OAIA,OAHAN,GAAApD,QAAA,SAAAqD,GACAI,EAAAE,EAAAF,EAAAJ,KAEAM,EAAAF,EAAAxB,KAGAX,EAAAyB,aAAAtB,EACA,IAAAmC,GAAAnC,EAAAQ,UAAAR,EAAAS,WACA,OAAAE,GAAAwB,GAAAnC,EAAAQ,UAAA5C,KAAA,SAAAgE,GAEA,MADA/B,GAAAiC,qBAAAF,EAAA5B,GACAkC,EAAAN,EAAApB,KAtBA,MAAAhD,GAAAyB,KAAAuB,IA4BA,QAAA0B,GAAAlC,EAAAQ,GACA,GAAA4B,GAAAlF,EAAA+C,QAAAD,GACAqC,EAAAD,EAAAE,KAAA,oBAEA,OADAD,GAAAE,YAAA/B,GACAT,EAAAqC,GAGA,QAAAhB,GAAAf,GAEA,GAAAmC,GAAAnC,EAAAL,OAEA,WAAAwC,EACA,QAEA,IAAAxC,GAAAwC,CAEAA,GAEOtF,EAAAyB,SAAA6D,GAEPxC,EAAAJ,EAAA6C,WAAAD,GACOtF,EAAAmE,QAAAmB,KAEPxC,EAAAwC,EAAAhB,IAAA,SAAAkB,GACA,MAAA9C,GAAA6C,WAAAC,MAPA1C,EAAAJ,EAAA+C,iBAAAtC,EAAAC,MAUAN,EAAA4C,EAAA5C,EACA,IAAA6C,GAAAjD,EAAA6C,aACAnC,EAAAV,EAAAW,QAAAF,EAAAC,MAAA,EAAAD,EACA,IAAAC,KAAAN,QAAA,CACA,GAAA8C,GAAAF,EAAAtC,EAAAN,SAAAwB,IAAA5B,EAAA6C,WACAzC,KAAA+C,OAAAD,GAKA,MAHAD,IACA7C,EAAAgD,KAAAH,GAEA7C,EAAAiD,OAAA,EACAjD,EACO,IAAAA,EAAAiD,OACPjD,EAAA,GADO,OAMP,QAAAkD,GAAA7C,GAmBA,QAAA8C,GAAA9C,GACA,GAAA+C,GAAA,CAIA,OAHAA,IAAAlG,EAAAmG,UAAAhD,EAAAG,UAAA,IACA4C,GAAAlG,EAAAmG,UAAAhD,EAAAC,MAAA,IACA8C,GAAAlG,EAAAmG,UAAAhD,EAAAI,aAAA,IAtBA,GAAA2C,GAAAD,EAAA9C,EACA,QAAA+C,EACA,KAAAvD,GAAAa,cAAA,wIAAAL,EACO,IAAA+C,EAAA,EACP,KAAAvD,GAAAa,cAAA,wIAAAL,EAIA,IAAAiD,IAAA,mMAEA,wCACAC,EAAAC,OAAAC,KAAApD,GAAAqD,OAAA,SAAAC,GACA,WAAAL,EAAAM,QAAAD,IAEA,IAAAJ,EAAAN,OACA,KAAApD,GAAAa,cAAA,wHAAAmD,KAAAC,UAAAP,EAAAQ,KAAA,OAAA1D,GAxPA,OACA2D,SAAA,KACAC,YAAA,EACAnG,OACAuC,QAAA,IACA6D,MAAA,IACAC,OAAA,KACAtC,MAAA,KACAuC,OAAA,KACAC,KAAA,MAEAC,YAAA,uCAAAC,EAAAC,EAAAC,GA4BA,QAAAC,KACA,GAAAC,GAAAJ,EAAAlE,QACAuE,EAAAC,GACA3H,GAAAqB,QAAAoG,EAAAG,qBAAA,SAAAC,EAAApB,GACA,GAAAqB,GAAAP,EAAAd,GAAAsB,OACAC,EAAA1H,EAAAyB,KAAA1B,EAAAyB,WAAAuF,EAAAQ,EAAAH,GACAM,GAAAtH,KAAA,SAAAmB,GACAiG,EAAAL,EAAA5F,OAKA,QAAA8F,GAAAM,GACA,MAAAZ,GAAAL,OAAAK,EAAAlE,QAAA+E,KAGAlI,EAAAmG,UAAA8B,KACAZ,EAAAL,MAAAK,EAAAlE,QAAA+E,KAAAD,GAEAZ,EAAAL,MAAAK,EAAAlE,QAAA+E,MANA,OASA,QAAAC,KAqBA,QAAAC,KACAC,IACAf,EAAAgB,OAAAC,GAtBA,GAAAF,GACAG,EAAA,IACAC,EAAA,EACAC,EAAA,EACAH,EAAAjB,EAAA,WAEA,GADAoB,KACA1I,EAAAmG,UAAAkB,EAAAlE,QAAA+E,KACA,MAAAE,IAEA,IAAAO,GAAAtB,EAAAF,MAAAE,EAAAF,KAAAE,EAAA5H,GACAkJ,IACAtB,EAAAlE,QAAAwF,cACAP,KACaK,EAAAC,EAAAF,IACb5F,EAAA,iFAAA4F,EAAA,KAAAnB,GACAe,MAEWK,EACXJ,GAAAhB,EAAAuB,IAAA,WAAAR,GAQA,QAAAS,GAAA1F,GACA,GAAAC,GAAAV,EAAAW,QAAAF,EAAAC,MAAA,EAAAD,EACAC,MAAA0F,gBACAzI,EAAA0I,iBAAA5F,EAAAC,EAAA0F,eAEA,IAAAE,GAAAtD,EAAAvC,EAAA8F,cAAApE,SACA7E,GAAAqB,QAAA2H,EAAA,SAAAE,GACA7I,EAAA0I,iBAAA5F,EAAAT,EAAAW,QAAA6F,GAAA,EAAA/F,GAAA2F,kBAlFAD,EAAAxB,EAAAlE,SACA6C,EAAAqB,EAAAlE,SAEAkE,EAAA5H,GAAAY,EAAA8I,WAAA9B,EAAAJ,OAAAI,EAAAlE,QAAAkE,EAAA1C,OAEA3E,EAAAoJ,OAAA/B,EAAAlE,SAEA+E,IAAAb,EAAAlE,QAAA+E,KAAAb,EAAA1C,OAAA,EACA9C,MAAA8F,EACAH,iBACA6B,aAAAhC,EAAAlE,QAAAkG,eACAC,cAAA,EACAC,cAAA,KAKA/B,IACAH,EAAAlE,QAAAqG,eACArB,IAEAd,EAAAlE,QAAA6D,OACAK,EAAAoC,OAAA,gBAAAjC,GAAA,KAgEA7G,KAAA,SAAAC,EAAAC,GAKA,QAAA6I,GAAAC,GACA9I,EAAAoC,KAAAJ,EAAA8G,IACAnH,EAAA3B,EAAA+I,YAAAhJ,GAGA,QAAAiJ,GAAAC,GACA,gBAAAxG,GACA,GAAAyG,GAAAzJ,EAAAyB,KAAAuB,EAQA,OAPAtD,GAAAqB,QAAAyI,EAAA,SAAAE,GACAD,IAAArJ,KAAA,SAAA4C,GACA,MAAAhD,GAAAyB,KAAAiI,EAAA1G,EAAA1C,EAAAuC,QAAAvC,IAAAF,KAAA,SAAAuJ,GACA,MAAAjK,GAAAyB,SAAAwI,KAAApH,EAAAoH,SAIAF,GAnBA7G,EAAAtC,EAAAuC,SAAAzC,KAAAmJ,EAAAnH,EAAAwH,qBAAAC,aAAAzJ,KAAAuD,EAAArD,EAAAuC,UAAAzC,KAAAmJ,EAAAnH,EAAAwH,qBAAAE,cAAA1J,KAAAgJ,GAAA,kBAAA1F,GACApB,EAAA,qHAAAhC,EAAAuC,QAAAa,OAiKA,QAAA0B,GAAAlF,GAMA,MALAA,KAAAR,EAAAmE,QAAA3D,GACAA,MACKA,IACLA,MAEAA,EAjRAP,EAAAG,UAAA,cAAAkC,GAEAA,EAAA+H,MAAA,KAuQA/H,EAAAgI,SAAA,uGLmJM,SAASvL,GMjaf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAAG,UAAA,+CAAAmK,EAAAC,GAEA,OACA7J,KAAA,SAAAC,EAAAmC,EAAAjC,GACA,GAAA2J,GAAA,KACA5J,EAAAkC,EAAA,GACA2H,EAAAF,EAAA,EACA1J,GAAA6J,SAAA,uBAAA9I,GACA,SAAAA,EACA0I,EAAA,WACAE,EAAAC,EAAAE,cACA/J,EAAAgK,WACa/J,EAAAgK,WACF,UAAAjJ,GACX6I,EAAAE,gBAAA/J,IACAA,EAAAkK,OACAjK,EAAAM,eAAA,YAAAqJ,GACAA,EAAAI,kBN+aM,SAAS9L,EAAQD,EAASQ,GOnchC,YAEA,IAAA0L,GAAA,SAAAC,GAA+B,MAAAC,OAAA/G,QAAA8G,KAAAC,MAAAC,KAAAF,IAE/BG,EAAAF,MAAAG,UAAAC,MACAtL,EAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAAsL,GAAA5I,GACA,GAAA6I,GAAA,CACA,QACA1E,SAAA,IACAxD,SAAA,SAAAzC,EAAAC,GAEA,GAAA2K,GAAA3K,EAAAM,eAAA,2BACA,uBAAAqK,EAAA,mlBAAkWA,EAAA,eAElWC,SAAA,EACA3E,YAAA,EACAnG,OACAsG,OAAA,IACAF,MAAA,KACAG,KAAA,MAEAC,YAAA,kBAAAC,GAcA,QAAAsE,GAAAlE,EAAA9C,GACA8C,EAAAS,IAAAT,EAAAS,KAAAvD,GAAA,EAGA,QAAAiH,GAAAnE,EAAA9C,GACA,GAAA3E,EAAAmG,UAAAsB,EAAAoE,SAAA,CAGA,GAAAC,GAAArE,EAAAoE,OACA7L,GAAAmE,QAAA2H,KACAA,OAEA9L,EAAAqB,QAAAyK,EAAA,SAAAD,GACA,IAAA7L,EAAAmG,UAAA0F,EAAAE,UACA,KAAApJ,GAAAa,cAAA,oFAAAiE,EAEA,IAAAuE,GAAAC,EAAAJ,EAAApE,EAAA9C,GACAuH,EAAAC,EAAAN,EAAApE,EAAA9C,GAEAvB,EAAAyI,EAAAzI,MAAA,QACAyI,GAAAO,aAAA/E,EAAAjE,GAAA4I,EAAAE,EAAAL,EAAAQ,cAIA,QAAAJ,GAAAJ,EAAApE,EAAA9C,GACA,GAAAqH,GAAAH,EAAAhE,YAAA,UAAAJ,EAAAS,IAAA,IACA,IAAAlI,EAAAS,WAAAuL,GAAA,CAGA,GAAAM,GAAAN,CACAA,GAAA,WACA,GAAAO,GAAAC,EAAAC,MAAAC,QAAAb,EAAAlH,GAAAkB,OAAAuF,EAAAzL,KAAAgN,YACA,OAAAL,GAAAG,MAAAC,OAAA1B,EAAAuB,KAEAP,EAAAY,YAAA,yCAAAnF,EAAAS,IAEA,MAAA8D,GAGA,QAAAG,GAAAN,EAAApE,EAAA9C,GACA,GAAAuH,GAAAL,EAAAE,QACA,IAAA/L,EAAAS,WAAAyL,GAAA,CAGA,GAAAW,GAAAX,CACAA,GAAA,WACA,GAAAK,GAAAC,EAAAC,MAAAC,QAAAb,EAAAlH,GAAAkB,OAAAuF,EAAAzL,KAAAgN,YACA,OAAAE,GAAAJ,MAAAC,OAAA1B,EAAAuB,KAEAL,EAAAU,YAAA,uCAAAnF,EAAAS,IAEA,MAAAgE,GAGA,QAAAM,GAAAX,EAAAlH,GACA,OAAAmI,GAAAH,UAAA5G,OAAAgH,EAAA7B,MAAA4B,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAoGF,EAAAE,EAAaA,IACjHD,EAAAC,EAAA,GAAAL,UAAAK,EAGA,QAAA3F,EAAAH,OAAAvC,IAAAkB,OAAAmF,EAAA+B,IAAAlB,EAAAO,eAxEA/E,EAAAJ,OAAA,UAAAuE,IAEAxL,EAAAqB,QAAAgG,EAAAH,OAAAyE,GACA3L,EAAAqB,QAAAgG,EAAAH,OAAA0E,GAGAvE,EAAAoC,OAAA,iBAAAwD,GACAjN,EAAAqB,QAAAgG,EAAAH,OAAA,SAAAO,GAEAA,EAAAD,gBAAAC,EAAAD,eAAAyF,OAES,KAgETtM,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAA,EAAAM,eAAA,UACA,KAAAuB,GAAAuK,eAAA,kFAEA,aAAApM,EAAAS,KAEA,KAAAoB,GAAAuK,eAAA,+EAGA,KAAApM,EAAAM,eAAA,WAAAR,EAAAoG,MACA,KAAArE,GAAAuK,eAAA,yDA1GAjN,EAAAG,UAAA,aAAAmL,GAEAA,EAAAlB,MAAA,KA6GAkB,EAAAjB,SAAA,qBP0cM,SAASvL,EAAQD,EAASQ,GQjkBhC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,KRwkBM,SAASlB,EAAQD,EAASQ,GS9kBhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAAyC,GAAAyK,GA4BA,QAAAC,GAAAjK,GACA,GAAAnD,EAAAmE,QAAAhB,GACAnD,EAAAqB,QAAA8B,EAAAiK,OACO,KAAApN,EAAAqN,SAAAlK,GAIP,KAAAmK,GAAA,kEAAA3G,KAAAC,UAAA+F,WAHAY,GAAApK,GACAqK,EAAArK,EAAA5B,MAAA4B,GAMA,QAAAE,GAAA9B,EAAAkM,EAAAC,GACA,GAAAtK,GAAAoK,EAAAjM,EACA,IAAA6B,GAAAqK,KAAA,EAGA,MAAArK,EAFA,MAAAkK,GAAA,oCAAA/L,EAAA,MAAAoF,KAAAC,UAAA8G,IAMA,QAAAH,GAAApK,GACA,IAAAA,EAAA5B,KACA,KAAA+L,GAAA,sDAAA3G,KAAAC,UAAA+F,WACO,MAAAxJ,EAAA2F,gBAAA3F,EAAAG,UAAAH,EAAAI,aACP,KAAA+J,GAAA,yGAAA3G,KAAAC,UAAA+F,WACO,IAAAxJ,EAAAG,UAAAH,EAAAI,YACP,KAAA+J,GAAA,sFAAA3G,KAAAC,UAAA+F,WAEAxJ,GAAAwK,kBAGAxK,GAAAwK,YAFAC,EAAAzK,EAAA5B,KAAAiM,EAAArK,EAAA,SAMA,QAAA0K,GAAA1K,EAAA5B,GACA,MAAAvB,GAAAmE,QAAAhB,GACAA,EAAAmB,IAAA,SAAAwJ,GACA,MAAAD,GAAAC,KAEO9N,EAAAqN,SAAAlK,IACPA,EAAA4K,MAAAC,EAAA7K,GACAA,EAAA5B,KAAA0M,EAAA9K,EAAA5B,GACA2M,EAAA/K,GACAgL,EAAAhL,EAAA5B,MAAA4B,EACAA,GACOnD,EAAAyB,SAAA0B,GACP0K,GACAvK,SAAAH,EACA5B,SAHO,OAQP,QAAAyM,GAAA7K,GACA,MAAAnD,GAAAyB,SAAA0B,EAAA4K,QACA5K,EAAA4K,OAEA/N,EAAAmG,UAAAhD,EAAA4K,OAGA5K,EAAA4K,SAIA,QAAAE,GAAA9K,EAAA5B,GACA,MAAA4B,GAAA5B,SAAA4B,EAAA4K,MAAAlH,KAAA,MAAAuH,EAGA,QAAAF,GAAA/K,GACAgK,EAAA/I,aAAAjB,GACAA,EAAAG,UACA6J,EAAAvI,qBAAAzB,EAAAG,SAAAH,GAEAA,EAAAwK,kBAGAxK,GAAAwK,YAFAC,EAAAzK,EAAA5B,KAAA4M,EAAAhL,EAAA,oBAIAkL,EAAAlL,GAGA,QAAAkL,GAAAlL,GACA,GAAAmL,IAAAtO,EAAAmE,QAAAhB,EAAA4K,SAAA5K,EAAA4K,MAAAQ,MAAAvO,EAAAyB,SACA,IAAA6M,EACA,KAAAhB,GAAA,iGAIA,QAAAM,GAAAY,EAAAC,EAAAC,EAAAC,GACAF,EAAArN,eAAAoN,IACAI,GAAA,2BAAAJ,EAAA,OAAAG,EAAA,yBAAAhI,KAAAC,UAAA6H,EAAAD,IAAA,SAAA7H,KAAAC,UAAA8H,GAAA,qEAAA7H,KAAA,MAIA,QAAAtB,GAAAhE,GACA,MAAA4M,GAAA5M,GAAA6M,GAGA,QAAA3I,GAAArC,GAEA,GAAAyL,KACA,QAAAtN,KAAA4M,GACAA,EAAA/M,eAAAG,IACA4M,EAAA5M,GAAAwM,OAAA,KAAAI,EAAA5M,GAAAwM,MAAArH,QAAAtD,IACAyL,EAAA/I,KAAAqI,EAAA5M,GAIA,YAAAsN,EAAA9I,OACA8I,EAAA,GACOA,EAAA9I,OAAA,EACP8I,EADO,OAMP,QAAAC,GAAAvN,GACA,GAAAuB,GAAAqL,EAAA5M,EAEA,cADA4M,GAAA5M,GACAuB,EAGA,QAAAiM,GAAA3L,GACA,GAAAyL,GAAApJ,EAAArC,EACA,IAAAyL,EAGA,MAAA7O,GAAAmE,QAAA0K,IAGAA,EAAAxN,QAAA,SAAAyB,GACA,MAAAgM,GAAAhM,EAAAvB,QAEAsN,GALAC,EAAAD,EAAAtN,MASA,QAAAyN,GAAA1L,EAAAH,EAAAvC,GAyBA,QAAAqO,KAEA,GAAAC,GAAAlP,EAAAoJ,OAAArF,EAAAoL,4BACAC,cAAA,WACAC,cAAA,WACAC,aAAA,UACAC,eAAA,YACAC,eAAA,YACAC,YAAA,SACAC,aAAA,UACAC,WAAA,QACAC,cAAA,aAGAC,EAAA7P,EAAAoJ,OAAArF,EAAA+L,uBACAC,eAAA,QACAC,YAAA,cACAC,IAAA,MACAC,IAAA,MACAC,SAAA,WACA/M,KAAA,QAGAgN,GAAAC,EAAAnB,EAAA/L,GAAA,GACAiN,EAAAC,EAAAR,EAAA1M,GAAA,GAGA,QAAAmN,GAAAC,GACAA,QACAvQ,EAAAqB,QAAAkP,EAAAC,MAAA,SAAAC,EAAAC,GACAC,EAAAN,EAAAK,EAAA,+BAAAA,EAAA,QAEA1Q,EAAAqB,QAAAkP,EAAAK,QAAA,SAAAH,EAAAC,GACAC,EAAAN,EAAAK,EAAA9P,EAAAK,MAAAwP,MAIA,QAAAL,GAAAS,EAAA/P,EAAAqC,EAAA2N,GAEA,GAAAC,GAAA5N,EAAA+C,gBACA8K,EAAA7N,EAAAyE,oBACA,IAAAmJ,GAAAC,EAAA,CAGAD,QACAC,OAEA,IAAAC,GAAAH,EAAA,KAA0C,GAC1CI,EAAAJ,EAAA,KAA0C,EAC1C9Q,GAAAqB,QAAAP,EAAA,SAAA2P,EAAAU,IAGAnR,EAAAmG,UAAA4K,EAAAN,KAAAzQ,EAAAmG,UAAA6K,EAAA,mBAAAP,MACAE,EAAAE,EAAA,GAAAM,EAAA,GAAAF,EAAA,4BAAAR,EAAA,KAAAS,MAKA,QAAAP,GAAA9P,EAAA6P,EAAAD,GACA5P,EAAA6P,SACA7P,EAAA6P,OAAAD,GAnFA,GAAA5P,GAAAb,EAAA+C,QAAA,WACAgB,EAAAZ,EAAAY,QACA,IAAAA,EAAAqN,SACA,MAAA9N,EAEAzC,GAAAmC,OAAAM,EACA,IAAA+M,GAAArQ,EAAA+C,QAAAlC,EAAA,GAAAwQ,iBAAA,cACA,OAAAhB,MAAAtK,QAGAuK,EAAAnN,EAAAoN,cAEAI,EAAAN,EAAA,KAAAzP,EAAAnB,IACAkR,EAAAN,EAAA,OAAAzP,EAAAnB,IAEA0D,EAAAnC,YACA2P,EAAAN,EAAA,iDAEApB,IAEApO,EAAAoC,QAZAK,EAgFA,QAAAsL,KACA0C,EAAAC,iBACAC,QAAA5C,KAAAnC,MAAA+E,QAAA7E,WAjQA,GAAA8E,GAAAtS,KAGAqO,KACAW,KACAC,EAAA,UACAkD,EAAAnS,KACAmO,EAAAH,EAAAD,cAEAlN,GAAAoJ,OAAAjK,MACAiO,UACA/J,UACAwK,aACAtI,aACAE,mBACAqJ,sBACAC,wBACAwC,iBAAA,EACArH,sBACAC,YAAA6E,GACA5E,gBAEAsH,KAAA,WACA,MAAAD,MA5BAxR,EAAA0R,SAAA,eAAAjP,GAEAA,EAAA2H,MAAA,KAwQA3H,EAAA4H,SAAA,6BTulBM,SAASvL,GUt2Bf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAA2R,SAAA,6GV62BM,SAAS7S,EAAQD,EAASQ,GWh3BhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GACAA,EAAA0R,SAAA,6BAaA,QAAAnO,GAAAqO,EAAAC,EAAArK,GAMA,MALAkF,WAAA5G,OAAA,IACA0B,EAAAqK,EACAA,EAAAD,EACAA,EAAA,MAEA,GAAAE,OAAAC,EAAAH,EAAAC,IAAA,sBAAA9R,EAAAiS,OAAAxK,KAGA,QAAAyF,GAAA2E,EAAAC,GAKA,MAJAA,KACAA,EAAAD,EACAA,EAAA,MAEA,GAAAE,OAAAC,EAAAH,EAAAC,IAGA,QAAAE,GAAAH,EAAAC,GACA,GAAAI,GAAA,EAIA,OAHA,QAAAL,IACAK,EAAA,GAAAC,EAAAN,GAEA,iBAAAC,EAAA,KAAAI,EAGA,QAAA9N,GAAAtB,GACA,GAAAA,EAAAQ,UAAAR,EAAAS,YACA,KAAA2J,GAAA,wFAAAvG,KAAAC,UAAA9D,GAEA,KAAAA,EAAAQ,WAAAR,EAAAS,YACA,KAAA2J,GAAA,8FAAAvG,KAAAC,UAAA9D,IAIA,QAAA8B,GAAAtB,EAAA8O,GACA,GAAAC,GAAA,yCACA,SAAA/O,EAAAoD,QAAA2L,GACA,KAAAnF,GAAA,wCAAAmF,EAAA,gGAAA/O,EAAA,6BAAAqD,KAAAC,UAAAwL,IAjDA,GAAAd,GAAAnS,KACAgT,EAAA,uEACAnS,GAAAoJ,OAAAjK,MACA+N,iBACA1J,gBACAY,eACAQ,uBACA8M,KAAA,WACA,MAAAJ,UXm6BM,SAASvS,GYj7Bf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAA2R,SAAA,2BZw7BM,SAAS7S,EAAQD,EAASQ,Ga37BhC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,IAAAW,GACAX,EAAA,GAAAW,Kbk8BM,SAASlB,EAAQD,EAASQ,Gcx8BhC,YAEA,IAAA8L,GAAAF,MAAAG,UAAAC,MACAtL,EAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GACAA,EAAApB,QAAA,wBASA,QAAAiD,GAAAlB,EAAAiH,EAAAlG,EAAAC,GACA,MAAA5B,GAAAS,WAAAoH,GACAA,EAAAjG,EAAAD,EAAAf,GAEAA,EAAAK,MAAA4G,GACAyK,WAAA1Q,EACAQ,YAAAT,IAKA,QAAAwH,GAAAlC,EAAA9D,EAAAwB,GACA,GAAAvB,GAAAD,EAAAC,IAOA,QANAA,GAAAD,EAAAG,SACAF,EAAA,YACOA,GAAAD,EAAAI,cACPH,EAAA,gBAGA6D,EAAA7D,EAAAD,EAAA+E,IAAAvD,GAAAkC,KAAA,KAGA,QAAAkC,KACA,GAAAwJ,GAAA5F,UAAA,GACA6F,IA2BA,OA1BAxS,GAAAqB,WAAAwE,OAAAuF,EAAAzL,KAAAgN,YAAA9H,UAAA,SAAA4N,GACAA,GAGAzS,EAAAqB,QAAAoR,EAAA,SAAAhC,EAAAhK,GAEA,mBAAAgK,IAAA,OAAAA,GAAAnK,OAAAoM,eAAAjC,KAAAkC,GAAArM,OAAAoM,eAAAjC,KAAAmC,EAQW5S,EAAAmG,UAAAsK,KACX+B,EAAA/L,GAAAgK,OATA,CACA,GAAAoC,GAAAL,EAAA/L,IACAoM,GAAA7S,EAAAmE,QAAAsM,GACAoC,KACaA,IACbA,MAEAL,EAAA/L,GAAAsC,EAAA8J,EAAApC,QAMAzQ,EAAAqB,QAAAkR,EAAA,SAAA9B,EAAAhK,SACA8L,GAAA9L,KAEAzG,EAAAqB,QAAAmR,EAAA,SAAA/B,EAAAhK,GACA8L,EAAA9L,GAAAgK,IAEA+B,EAAAD,EA1DA,GAAAI,GAAArM,OAAAoM,mBACAE,EAAAtM,OAAAoM,kBACA,QACA5Q,aACAqH,aACAJ,wBdwgCM,SAAShK,GephCf,YAEA,IAAAiM,GAAA,SAAAC,GAA+B,MAAAC,OAAA/G,QAAA8G,KAAAC,MAAAC,KAAAF,GAE/BlM,GAAAD,QAAA,SAAAmB,GACAA,EAAApB,QAAA,+EAAA6D,EAAAoQ,EAAAC,GACA,kBACA,IAAArQ,EAAA6O,gBAAA,CACA,GAAAhF,GAAArB,MAAAG,UAAAC,MAAA3L,KAAAgN,WACAqG,EAAAzG,EAAAxH,OACAwH,GAAArK,QAAA,mBACAqK,EAAAzG,KAAA,GAAAgN,EAAAE,GACAD,EAAAnE,KAAAnC,MAAAsG,EAAA/H,EAAAuB,Wf8hCM,SAASxN,EAAQD,EAASQ,GgB1iChC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,IAAAW,GACAX,EAAA,IAAAW,KhBijCM,SAASlB,GiBrjCfA,EAAAD,QAAAM","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_15__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(11)(ngModule);\n\t__webpack_require__(14)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(15);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", \"$q\", function (formlyUtil, $q) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t\n\t        // setup watchers and parsers\n\t        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          if (hasValidators) {\n\t            var isPossiblyAsync = !angular.isString(validator);\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          } else {\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              ctrl.$setValidity(name, isValid);\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t  }]);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$interval\", \"$parse\", function fieldController($scope, $interval, $parse) {\n\t        /* jshint maxcomplexity:6 */\n\t        mergeFieldOptionsWithTypeDefaults($scope.options);\n\t        apiCheck($scope.options);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\t\n\t        angular.extend($scope.options, {\n\t          // attach the key in case the formly-field directive is used directly\n\t          key: $scope.options.key || $scope.index || 0,\n\t          value: valueGetterSetter,\n\t          runExpressions: runExpressions,\n\t          modelOptions: $scope.options.modelOptions || {\n\t            getterSetter: true,\n\t            allowInvalid: true\n\t          }\n\t        });\n\t\n\t        // initalization\n\t        runExpressions();\n\t        if (!$scope.options.noFormControl) {\n\t          setFormControl();\n\t        }\n\t        if ($scope.options.model) {\n\t          $scope.$watch(\"options.model\", runExpressions, true);\n\t        }\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t            var setter = $parse(prop).assign;\n\t            var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t            promise.then(function (value) {\n\t              setter(field, value);\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function setFormControl() {\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = $interval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined($scope.options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = $scope.form && $scope.form[$scope.id];\n\t            if (formControl) {\n\t              $scope.options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            $interval.cancel(interval);\n\t          }\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options) {\n\t          var type = formlyConfig.getType(options.type, true, options);\n\t          if (type && type.defaultOptions) {\n\t            formlyUtil.reverseDeepMerge(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            formlyUtil.reverseDeepMerge(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper) {\n\t          return $q.when(template);\n\t        } else if (angular.isArray(wrapper)) {\n\t          wrapper.forEach(formlyUsability.checkWrapper);\n\t          var promises = wrapper.map(function (w) {\n\t            return getTemplate(w.template || w.templateUrl, !w.template);\n\t          });\n\t          return $q.all(promises).then(function (wrappersTemplates) {\n\t            wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t              formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t            });\n\t            wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t            var totalWrapper = wrappersTemplates.shift();\n\t            wrappersTemplates.forEach(function (wrapperTemplate) {\n\t              totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t            });\n\t            return doTransclusion(totalWrapper, template);\n\t          });\n\t        } else {\n\t          formlyUsability.checkWrapper(wrapper);\n\t          var t = wrapper.template || wrapper.templateUrl;\n\t          return getTemplate(t, !wrapper.template).then(function (wrapperTemplate) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper);\n\t            return doTransclusion(wrapperTemplate, template);\n\t          });\n\t        }\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var wrapperEl = angular.element(wrapper);\n\t      var transcludeEl = wrapperEl.find(\"formly-transclude\");\n\t      transcludeEl.replaceWith(template);\n\t      return asHtml(wrapperEl);\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      /* jshint maxcomplexity:9 */\n\t      var templateOption = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (templateOption === null) {\n\t        return \"\";\n\t      }\n\t      var wrapper = templateOption;\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!templateOption) {\n\t        wrapper = formlyConfig.getWrapperByType(options.type);\n\t      } else if (angular.isString(templateOption)) {\n\t        // string means it's a type\n\t        wrapper = formlyConfig.getWrapper(templateOption);\n\t      } else if (angular.isArray(templateOption)) {\n\t        // array means wrap the wrappers\n\t        wrapper = templateOption.map(function (wrapperName) {\n\t          return formlyConfig.getWrapper(wrapperName);\n\t        });\n\t      }\n\t      wrapper = arrayify(wrapper);\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      if (wrapper.length > 1) {\n\t        return wrapper;\n\t      } else if (wrapper.length === 1) {\n\t        return wrapper[0];\n\t      }\n\t      // otherwise return nothing\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      // check that only allowed properties are provided\n\t      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\",\n\t      // things we add to the field after the fact are ok\n\t      \"formControl\", \"value\", \"runExpressions\"];\n\t      var extraProps = Object.keys(options).filter(function (prop) {\n\t        return allowedProperties.indexOf(prop) === -1;\n\t      });\n\t      if (extraProps.length) {\n\t        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n\t      }\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      link: function (scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  function formlyForm(formlyUsability) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: function (el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.hasOwnProperty(\"noNgForm\") ? \"div\" : \"ng-form\";\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=?\", // we'll do our own warning to help with migrations\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function ($scope) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function (scope, el, attrs) {\n\t        if (attrs.hasOwnProperty(\"result\")) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n\t        }\n\t        if (attrs.name !== \"form\") {\n\t          // then they specified their own name\n\t          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n\t        }\n\t        // enforce the model attribute because we're making it optional to help with migrations\n\t        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this2 = this;\n\t\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      templateManipulators: {\n\t        preWrapper: [ngModelAttrsManipulator],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      if (!options.name) {\n\t        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n\t      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n\t        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n\t      } else if (options.template && options.templateUrl) {\n\t        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t    }\n\t\n\t    function setWrapper(options, name) {\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        return setWrapper({\n\t          template: options,\n\t          name: name\n\t        });\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      if (wrappers.length === 1) {\n\t        return wrappers[0];\n\t      } else if (wrappers.length > 1) {\n\t        return wrappers;\n\t      }\n\t      // otherwise nothing\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t    function ngModelAttrsManipulator(template, options, scope) {\n\t      /* jshint maxcomplexity:7 */\n\t      var el = angular.element(\"<a></a>\");\n\t      var data = options.data || {};\n\t      if (data.noTouchy) {\n\t        return template;\n\t      }\n\t      el.append(template);\n\t      var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n\t      if (!modelEls || !modelEls.length) {\n\t        return template;\n\t      }\n\t      addNgModelAttrs(options.ngModelAttrs);\n\t\n\t      addIfNotPresent(modelEls, \"id\", scope.id);\n\t      addIfNotPresent(modelEls, \"name\", scope.id);\n\t\n\t      if (options.validators) {\n\t        addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n\t      }\n\t      addTemplateOptionsAttrs();\n\t\n\t      return el.html();\n\t\n\t\n\t      function addTemplateOptionsAttrs() {\n\t        // if the field has specified values for these, then we want to add the attributes and watch them for changes.\n\t        var boundAttributes = angular.extend(data.ngModelBoundAttributes || {}, {\n\t          \"ng-disabled\": \"disabled\",\n\t          \"ng-required\": \"required\",\n\t          \"ng-pattern\": \"pattern\",\n\t          \"ng-maxlength\": \"maxlength\",\n\t          \"ng-minlength\": \"minlength\",\n\t          \"ng-change\": \"change\",\n\t          \"ng-keydown\": \"keydown\",\n\t          \"ng-keyup\": \"keyup\",\n\t          \"ng-keypress\": \"keypress\"\n\t        });\n\t        // attributes are wrapped in curly braces\n\t        var attributes = angular.extend(data.ngModelAttributes || {}, {\n\t          \"formly-focus\": \"focus\",\n\t          placeholder: \"placeholder\",\n\t          min: \"min\",\n\t          max: \"max\",\n\t          tabindex: \"tabindex\",\n\t          type: \"type\"\n\t        });\n\t\n\t        addDefinedAttributes(modelEls, boundAttributes, options, false);\n\t        addDefinedAttributes(modelEls, attributes, options, true);\n\t      }\n\t\n\t      function addNgModelAttrs(ngModelAttrs) {\n\t        ngModelAttrs = ngModelAttrs || {};\n\t        angular.forEach(ngModelAttrs.bound, function (val, attr) {\n\t          addIfNotPresent(modelEls, attr, \"options.ngModelAttrs.bound['\" + attr + \"']\");\n\t        });\n\t        angular.forEach(ngModelAttrs.unbound, function (val, attr) {\n\t          addIfNotPresent(modelEls, attr, scope.$eval(val));\n\t        });\n\t      }\n\t\n\t      function addDefinedAttributes(els, attrs, options, isExpression) {\n\t        /* jshint maxcomplexity:6 */\n\t        var to = options.templateOptions;\n\t        var ep = options.expressionProperties;\n\t        if (!to && !ep) {\n\t          return; // no reason to iterate if these don't exist...\n\t        } else {\n\t          to = to || {};\n\t          ep = ep || {};\n\t        }\n\t        var valPrefix = isExpression ? \"{{\" : \"\";\n\t        var valSuffix = isExpression ? \"}}\" : \"\";\n\t        angular.forEach(attrs, function (val, attrName) {\n\t          // if it's defined as a property on template options, or if it's an expression property,\n\t          // then we'll add the attribute (and hence the watchers)\n\t          if (angular.isDefined(to[val]) || angular.isDefined(ep[\"templateOptions.\" + val])) {\n\t            addIfNotPresent(els, \"\" + attrName, \"\" + valPrefix + \"options.templateOptions['\" + val + \"']\" + valSuffix);\n\t          }\n\t        });\n\t      }\n\t\n\t      function addIfNotPresent(el, attr, val) {\n\t        if (!el.attr(attr)) {\n\t          el.attr(attr, val);\n\t        }\n\t      }\n\t    }\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t\n\t\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", function () {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"3.0.3\"));\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", function () {\n\t    var objectPrototype = Object.getPrototypeOf({});\n\t    var arrayPrototype = Object.getPrototypeOf([]);\n\t    return {\n\t      formlyEval: formlyEval,\n\t      getFieldId: getFieldId,\n\t      reverseDeepMerge: reverseDeepMerge\n\t    };\n\t\n\t    function formlyEval(scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    }\n\t\n\t    function getFieldId(formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    }\n\t\n\t    function reverseDeepMerge() {\n\t      var realRes = arguments[0];\n\t      var res = {};\n\t      angular.forEach([].concat(_slice.call(arguments)).reverse(), function (src) {\n\t        if (!src) {\n\t          return;\n\t        }\n\t        angular.forEach(src, function (val, prop) {\n\t          /* jshint maxcomplexity:7 */\n\t          if (typeof val === \"object\" && val !== null && (Object.getPrototypeOf(val) === objectPrototype || Object.getPrototypeOf(val) === arrayPrototype)) {\n\t            var deepRes = res[prop];\n\t            if (!deepRes && angular.isArray(val)) {\n\t              deepRes = [];\n\t            } else if (!deepRes) {\n\t              deepRes = {};\n\t            }\n\t            res[prop] = reverseDeepMerge(deepRes, val);\n\t          } else if (angular.isDefined(val)) {\n\t            res[prop] = val;\n\t          }\n\t        });\n\t      });\n\t      angular.forEach(realRes, function (val, prop) {\n\t        delete realRes[prop];\n\t      });\n\t      angular.forEach(res, function (val, prop) {\n\t        realRes[prop] = val;\n\t      });\n\t      res = realRes;\n\t      return res;\n\t    }\n\t\n\t  });\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e1e7ceeb76ccba537246\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\n\nvar angular = require(\"angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", \"$q\", function (formlyUtil, $q) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n\n        // setup watchers and parsers\n        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n        angular.forEach(validators, function (validator, name) {\n          if (hasValidators) {\n            var isPossiblyAsync = !angular.isString(validator);\n            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          } else {\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              ctrl.$setValidity(name, isValid);\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$interval\", \"$parse\", function fieldController($scope, $interval, $parse) {\n        /* jshint maxcomplexity:6 */\n        mergeFieldOptionsWithTypeDefaults($scope.options);\n        apiCheck($scope.options);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\n        angular.extend($scope.options, {\n          // attach the key in case the formly-field directive is used directly\n          key: $scope.options.key || $scope.index || 0,\n          value: valueGetterSetter,\n          runExpressions: runExpressions,\n          modelOptions: $scope.options.modelOptions || {\n            getterSetter: true,\n            allowInvalid: true\n          }\n        });\n\n        // initalization\n        runExpressions();\n        if (!$scope.options.noFormControl) {\n          setFormControl();\n        }\n        if ($scope.options.model) {\n          $scope.$watch(\"options.model\", runExpressions, true);\n        }\n\n        // function definitions\n        function runExpressions() {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n            var setter = $parse(prop).assign;\n            var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n            promise.then(function (value) {\n              setter(field, value);\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function setFormControl() {\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = $interval(function () {\n            iterations++;\n            if (!angular.isDefined($scope.options.key)) {\n              return cleanUp();\n            }\n            var formControl = $scope.form && $scope.form[$scope.id];\n            if (formControl) {\n              $scope.options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            $interval.cancel(interval);\n          }\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options) {\n          var type = formlyConfig.getType(options.type, true, options);\n          if (type && type.defaultOptions) {\n            formlyUtil.reverseDeepMerge(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, function (typeName) {\n            formlyUtil.reverseDeepMerge(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n        });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, function (manipulator) {\n              chain = chain.then(function (template) {\n                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element(\"<a></a>\");\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      var type = formlyConfig.getType(options.type, true, options);\n      var template = options.template || type && type.template;\n      var templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(template, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      var wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper) {\n          return $q.when(template);\n        } else if (angular.isArray(wrapper)) {\n          wrapper.forEach(formlyUsability.checkWrapper);\n          var promises = wrapper.map(function (w) {\n            return getTemplate(w.template || w.templateUrl, !w.template);\n          });\n          return $q.all(promises).then(function (wrappersTemplates) {\n            wrappersTemplates.forEach(function (wrapperTemplate, index) {\n              formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n            });\n            wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n            var totalWrapper = wrappersTemplates.shift();\n            wrappersTemplates.forEach(function (wrapperTemplate) {\n              totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n            });\n            return doTransclusion(totalWrapper, template);\n          });\n        } else {\n          formlyUsability.checkWrapper(wrapper);\n          var t = wrapper.template || wrapper.templateUrl;\n          return getTemplate(t, !wrapper.template).then(function (wrapperTemplate) {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper);\n            return doTransclusion(wrapperTemplate, template);\n          });\n        }\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      var wrapperEl = angular.element(wrapper);\n      var transcludeEl = wrapperEl.find(\"formly-transclude\");\n      transcludeEl.replaceWith(template);\n      return asHtml(wrapperEl);\n    }\n\n    function getWrapperOption(options) {\n      /* jshint maxcomplexity:9 */\n      var templateOption = options.wrapper;\n      // explicit null means no wrapper\n      if (templateOption === null) {\n        return \"\";\n      }\n      var wrapper = templateOption;\n      // nothing specified means use the default wrapper for the type\n      if (!templateOption) {\n        wrapper = formlyConfig.getWrapperByType(options.type);\n      } else if (angular.isString(templateOption)) {\n        // string means it's a type\n        wrapper = formlyConfig.getWrapper(templateOption);\n      } else if (angular.isArray(templateOption)) {\n        // array means wrap the wrappers\n        wrapper = templateOption.map(function (wrapperName) {\n          return formlyConfig.getWrapper(wrapperName);\n        });\n      }\n      wrapper = arrayify(wrapper);\n      var defaultWrapper = formlyConfig.getWrapper();\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      if (wrapper.length > 1) {\n        return wrapper;\n      } else if (wrapper.length === 1) {\n        return wrapper[0];\n      }\n      // otherwise return nothing\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      // check that only allowed properties are provided\n      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\",\n      // things we add to the field after the fact are ok\n      \"formControl\", \"value\", \"runExpressions\"];\n      var extraProps = Object.keys(options).filter(function (prop) {\n        return allowedProperties.indexOf(prop) === -1;\n      });\n      if (extraProps.length) {\n        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n      }\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      link: function (scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe(\"formlyFocus\", function (value) {\n          if (value === \"true\") {\n            $timeout(function () {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~ ~attrs.focusWait);\n          } else if (value === \"false\") {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-focus.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", formlyForm);\n\n  formlyForm.tests = ON_TEST ? require(\"./formly-form.test\")(ngModule) : null;\n\n  function formlyForm(formlyUsability) {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: function (el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        var rootEl = attrs.hasOwnProperty(\"noNgForm\") ? \"div\" : \"ng-form\";\n        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=?\", // we'll do our own warning to help with migrations\n        form: \"=?\"\n      },\n      controller: [\"$scope\", function ($scope) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }],\n      link: function (scope, el, attrs) {\n        if (attrs.hasOwnProperty(\"result\")) {\n          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n        }\n        if (attrs.name !== \"form\") {\n          // then they specified their own name\n          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n        }\n        // enforce the model attribute because we're making it optional to help with migrations\n        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n        }\n      }\n    };\n  }\n  formlyForm.$inject = [\"formlyUsability\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n  require(\"./formly-focus\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this2 = this;\n\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = \"default\";\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n\n    angular.extend(this, {\n      setType: setType,\n      getType: getType,\n      setWrapper: setWrapper,\n      getWrapper: getWrapper,\n      getWrapperByType: getWrapperByType,\n      removeWrapperByName: removeWrapperByName,\n      removeWrappersForType: removeWrappersForType,\n      disableWarnings: false,\n      templateManipulators: {\n        preWrapper: [ngModelAttrsManipulator],\n        postWrapper: []\n      },\n      $get: function () {\n        return _this2;\n      }\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        typeMap[options.name] = options;\n      } else {\n        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n      } else {\n        return type;\n      }\n    }\n\n    function checkType(options) {\n      if (!options.name) {\n        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n      } else if (options.template && options.templateUrl) {\n        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, \"types\");\n      } else {\n        delete options.overwriteOk;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name: name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      if (wrappers.length === 1) {\n        return wrappers[0];\n      } else if (wrappers.length > 1) {\n        return wrappers;\n      }\n      // otherwise nothing\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach(function (wrapper) {\n          return removeWrapperByName(wrapper.name);\n        });\n        return wrappers;\n      }\n    }\n\n    function ngModelAttrsManipulator(template, options, scope) {\n      /* jshint maxcomplexity:7 */\n      var el = angular.element(\"<a></a>\");\n      var data = options.data || {};\n      if (data.noTouchy) {\n        return template;\n      }\n      el.append(template);\n      var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n      if (!modelEls || !modelEls.length) {\n        return template;\n      }\n      addNgModelAttrs(options.ngModelAttrs);\n\n      addIfNotPresent(modelEls, \"id\", scope.id);\n      addIfNotPresent(modelEls, \"name\", scope.id);\n\n      if (options.validators) {\n        addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n      }\n      addTemplateOptionsAttrs();\n\n      return el.html();\n\n\n      function addTemplateOptionsAttrs() {\n        // if the field has specified values for these, then we want to add the attributes and watch them for changes.\n        var boundAttributes = angular.extend(data.ngModelBoundAttributes || {}, {\n          \"ng-disabled\": \"disabled\",\n          \"ng-required\": \"required\",\n          \"ng-pattern\": \"pattern\",\n          \"ng-maxlength\": \"maxlength\",\n          \"ng-minlength\": \"minlength\",\n          \"ng-change\": \"change\",\n          \"ng-keydown\": \"keydown\",\n          \"ng-keyup\": \"keyup\",\n          \"ng-keypress\": \"keypress\"\n        });\n        // attributes are wrapped in curly braces\n        var attributes = angular.extend(data.ngModelAttributes || {}, {\n          \"formly-focus\": \"focus\",\n          placeholder: \"placeholder\",\n          min: \"min\",\n          max: \"max\",\n          tabindex: \"tabindex\",\n          type: \"type\"\n        });\n\n        addDefinedAttributes(modelEls, boundAttributes, options, false);\n        addDefinedAttributes(modelEls, attributes, options, true);\n      }\n\n      function addNgModelAttrs(ngModelAttrs) {\n        ngModelAttrs = ngModelAttrs || {};\n        angular.forEach(ngModelAttrs.bound, function (val, attr) {\n          addIfNotPresent(modelEls, attr, \"options.ngModelAttrs.bound['\" + attr + \"']\");\n        });\n        angular.forEach(ngModelAttrs.unbound, function (val, attr) {\n          addIfNotPresent(modelEls, attr, scope.$eval(val));\n        });\n      }\n\n      function addDefinedAttributes(els, attrs, options, isExpression) {\n        /* jshint maxcomplexity:6 */\n        var to = options.templateOptions;\n        var ep = options.expressionProperties;\n        if (!to && !ep) {\n          return; // no reason to iterate if these don't exist...\n        } else {\n          to = to || {};\n          ep = ep || {};\n        }\n        var valPrefix = isExpression ? \"{{\" : \"\";\n        var valSuffix = isExpression ? \"}}\" : \"\";\n        angular.forEach(attrs, function (val, attrName) {\n          // if it's defined as a property on template options, or if it's an expression property,\n          // then we'll add the attribute (and hence the watchers)\n          if (angular.isDefined(to[val]) || angular.isDefined(ep[\"templateOptions.\" + val])) {\n            addIfNotPresent(els, \"\" + attrName, \"\" + valPrefix + \"options.templateOptions['\" + val + \"']\" + valSuffix);\n          }\n        });\n      }\n\n      function addIfNotPresent(el, attr, val) {\n        if (!el.attr(attr)) {\n          el.attr(attr, val);\n        }\n      }\n    }\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn.apply(console, arguments);\n      }\n    }\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", function () {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", function () {\n    var objectPrototype = Object.getPrototypeOf({});\n    var arrayPrototype = Object.getPrototypeOf([]);\n    return {\n      formlyEval: formlyEval,\n      getFieldId: getFieldId,\n      reverseDeepMerge: reverseDeepMerge\n    };\n\n    function formlyEval(scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue,\n          $modelValue: modelValue\n        });\n      }\n    }\n\n    function getFieldId(formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    }\n\n    function reverseDeepMerge() {\n      var realRes = arguments[0];\n      var res = {};\n      angular.forEach([].concat(_slice.call(arguments)).reverse(), function (src) {\n        if (!src) {\n          return;\n        }\n        angular.forEach(src, function (val, prop) {\n          /* jshint maxcomplexity:7 */\n          if (typeof val === \"object\" && val !== null && (Object.getPrototypeOf(val) === objectPrototype || Object.getPrototypeOf(val) === arrayPrototype)) {\n            var deepRes = res[prop];\n            if (!deepRes && angular.isArray(val)) {\n              deepRes = [];\n            } else if (!deepRes) {\n              deepRes = {};\n            }\n            res[prop] = reverseDeepMerge(deepRes, val);\n          } else if (angular.isDefined(val)) {\n            res[prop] = val;\n          }\n        });\n      });\n      angular.forEach(realRes, function (val, prop) {\n        delete realRes[prop];\n      });\n      angular.forEach(res, function (val, prop) {\n        realRes[prop] = val;\n      });\n      res = realRes;\n      return res;\n    }\n\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}