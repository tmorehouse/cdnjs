{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 1c846e358baa5a07238d","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_15__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ngModuleName","angular","ngModule","version","window","directive","formlyUtil","$q","isPromiseLike","obj","isFunction","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","forEach","validator","name","extraProps","v","key","indexOf","push","length","Object","keys","Error","join","JSON","stringify","link","scope","el","attrs","ctrl","$eval","formlyCustomValidation","options","validationMessages","hasValidators","hasOwnProperty","message","formlyEval","$modelValue","$viewValue","isObject","expression","isPossiblyAsync","isString","validatorCollection","modelValue","viewValue","value","when","reject","$parsers","unshift","isValid","$setValidity","formlyField","$http","$compile","$templateCache","formlyConfig","formlyUsability","formlyWarn","asHtml","wrapper","element","append","html","getFieldTemplate","type","getType","template","templateUrl","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","isArray","checkWrapper","promises","map","w","all","wrappersTemplates","wrapperTemplate","index","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","t","superWrapper","transcludeEl","find","replaceWith","templateOption","getWrapper","wrapperName","getWrapperByType","arrayify","defaultWrapper","typeWrappers","concat","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","filter","prop","restrict","transclude","model","formId","fields","form","controller","$scope","$interval","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","simplifyLife","reverseDeepMerge","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","typeName","extraOptions","extendOptionsWithDefaults","extend","setFormControl","cleanUp","stopWaitingForDestroy","cancel","interval","noFormControl","maxTime","intervalTime","iterations","formControl","$on","addModelWatcher","$watch","invokeControllers","undefined","arguments","opts","fieldType","getFieldId","setElementTemplate","templateEl","contents","apply","thusly","args","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","tests","$inject","$timeout","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toArray","arr","Array","from","_slice","prototype","slice","formlyForm","currentFormId","rootEl","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","displayName","originalListener","_len","originalArgs","_key","newResult","getFormlyError","formlyUsabilityProvider","setType","getError","checkType","typeMap","throwError","errorContext","overwriteOk","checkOverwrite","setWrapper","wrapperOptions","types","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","object","newValue","objectName","warn","wrappers","removeWrapperByName","removeWrappersForType","ngModelAttrsManipulator","addTemplateOptionsAttrs","boundAttributes","ngModelBoundAttributes","ng-disabled","ng-required","ng-pattern","ng-maxlength","ng-minlength","invokedAttributes","ngModelInvokedAttributes","ng-change","ng-keydown","ng-keyup","ng-keypress","ng-click","ng-focus","ng-blur","attributes","ngModelAttributes","formly-focus","placeholder","min","max","tabindex","addDefinedAttributes","modelEls","val","addNgModelAttrs","ngModelAttrs","bound","attr","addIfNotPresent","unbound","els","prefix","suffix","to","ep","attrName","valPrefix","valSuffix","noTouchy","querySelectorAll","modelOptions","getterSetter","_this","disableWarnings","console","_this2","$get","provider","constant","errorInfoSlug","getErrorMessage","toJson","url","errorsAndWarningsUrlPrefix","additionalInfo","formlyTransclude","realRes","res","src","getPrototypeOf","objectPrototype","arrayPrototype","deepRes","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_15__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(11)(ngModule);\n\t__webpack_require__(14)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(15);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", \"$q\", function (formlyUtil, $q) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t        checkValidators(validators);\n\t        scope.options = scope.options || {};\n\t        scope.options.validationMessages = {};\n\t\n\t        // setup watchers and parsers\n\t        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          var message = validator.message;\n\t          if (message) {\n\t            scope.options.validationMessages[name] = function () {\n\t              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t            };\n\t          }\n\t          validator = angular.isObject(validator) ? validator.expression : validator;\n\t          if (hasValidators) {\n\t            var isPossiblyAsync = !angular.isString(validator);\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          } else {\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              ctrl.$setValidity(name, isValid);\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t\n\t    function checkValidators(validators) {\n\t      var allowedProperties = [\"expression\", \"message\"];\n\t      var validatorsWithExtraProps = {};\n\t      angular.forEach(validators, function (validator, name) {\n\t        var extraProps = [];\n\t        angular.forEach(validator, function (v, key) {\n\t          if (allowedProperties.indexOf(key) === -1) {\n\t            extraProps.push(key);\n\t          }\n\t        });\n\t        if (extraProps.length) {\n\t          validatorsWithExtraProps[name] = extraProps;\n\t        }\n\t      });\n\t      if (Object.keys(validatorsWithExtraProps).length) {\n\t        throw new Error([\"Validators are only allowed to have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t      }\n\t    }\n\t  }]);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$interval\", \"$parse\", \"$controller\", function fieldController($scope, $interval, $parse, $controller) {\n\t        var opts = $scope.options;\n\t        var fieldType = opts.type && formlyConfig.getType(opts.type);\n\t        simplifyLife(opts);\n\t        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n\t        apiCheck(opts);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\t\n\t        // initalization\n\t        extendOptionsWithDefaults(opts, $scope.index);\n\t        runExpressions();\n\t        setFormControl($scope, opts, $interval);\n\t        addModelWatcher($scope, opts);\n\t        invokeControllers($scope, opts, fieldType);\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t            var setter = $parse(prop).assign;\n\t            var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t            promise.then(function (value) {\n\t              setter(field, value);\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function simplifyLife(options) {\n\t          // add data and templateOptions as empty objects so you don't have to undefined check everywhere\n\t          formlyUtil.reverseDeepMerge(options, {\n\t            data: {},\n\t            templateOptions: {}\n\t          });\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t          if (type) {\n\t            mergeOptions(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t\n\t        function mergeOptions(options, extraOptions) {\n\t          if (extraOptions) {\n\t            if (angular.isFunction(extraOptions)) {\n\t              extraOptions = extraOptions(options);\n\t            }\n\t            formlyUtil.reverseDeepMerge(options, extraOptions);\n\t          }\n\t        }\n\t\n\t        function extendOptionsWithDefaults(options, index) {\n\t          angular.extend(options, {\n\t            // attach the key in case the formly-field directive is used directly\n\t            key: options.key || index || 0,\n\t            value: valueGetterSetter,\n\t            runExpressions: runExpressions\n\t          });\n\t        }\n\t\n\t        // initialization functions\n\t        function setFormControl(scope, options, $interval) {\n\t          if (options.noFormControl) {\n\t            return;\n\t          }\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = $interval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined(options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = scope.form && scope.form[scope.id];\n\t            if (formControl) {\n\t              options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            $interval.cancel(interval);\n\t          }\n\t        }\n\t\n\t        function addModelWatcher(scope, options) {\n\t          if (options.model) {\n\t            scope.$watch(\"options.model\", runExpressions, true);\n\t          }\n\t        }\n\t\n\t        function invokeControllers(scope) {\n\t          var options = arguments[1] === undefined ? {} : arguments[1];\n\t          var type = arguments[2] === undefined ? {} : arguments[2];\n\t          angular.forEach([type.controller, options.controller], function (controller) {\n\t            if (controller) {\n\t              $controller(controller, { $scope: scope });\n\t            }\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n\t        var args = arguments;\n\t        var thusly = this;\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t          if (type && type.link) {\n\t            type.link.apply(thusly, args);\n\t          }\n\t          if (scope.options.link) {\n\t            scope.options.link.apply(thusly, args);\n\t          }\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper) {\n\t          return $q.when(template);\n\t        } else if (angular.isArray(wrapper)) {\n\t          wrapper.forEach(formlyUsability.checkWrapper);\n\t          var promises = wrapper.map(function (w) {\n\t            return getTemplate(w.template || w.templateUrl, !w.template);\n\t          });\n\t          return $q.all(promises).then(function (wrappersTemplates) {\n\t            wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t              formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t            });\n\t            wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t            var totalWrapper = wrappersTemplates.shift();\n\t            wrappersTemplates.forEach(function (wrapperTemplate) {\n\t              totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t            });\n\t            return doTransclusion(totalWrapper, template);\n\t          });\n\t        } else {\n\t          formlyUsability.checkWrapper(wrapper);\n\t          var t = wrapper.template || wrapper.templateUrl;\n\t          return getTemplate(t, !wrapper.template).then(function (wrapperTemplate) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper);\n\t            return doTransclusion(wrapperTemplate, template);\n\t          });\n\t        }\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t      superWrapper.append(wrapper);\n\t      var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t      transcludeEl.replaceWith(template);\n\t      return superWrapper.html();\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      /* jshint maxcomplexity:9 */\n\t      var templateOption = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (templateOption === null) {\n\t        return \"\";\n\t      }\n\t      var wrapper = templateOption;\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!templateOption) {\n\t        wrapper = formlyConfig.getWrapperByType(options.type);\n\t      } else if (angular.isString(templateOption)) {\n\t        // string means it's a type\n\t        wrapper = formlyConfig.getWrapper(templateOption);\n\t      } else if (angular.isArray(templateOption)) {\n\t        // array means wrap the wrappers\n\t        wrapper = templateOption.map(function (wrapperName) {\n\t          return formlyConfig.getWrapper(wrapperName);\n\t        });\n\t      }\n\t      wrapper = arrayify(wrapper);\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      if (wrapper.length > 1) {\n\t        return wrapper;\n\t      } else if (wrapper.length === 1) {\n\t        return wrapper[0];\n\t      }\n\t      // otherwise return nothing\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      // check that only allowed properties are provided\n\t      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\",\n\t      // things we add to the field after the fact are ok\n\t      \"validationMessages\", \"formControl\", \"value\", \"runExpressions\"];\n\t      var extraProps = Object.keys(options).filter(function (prop) {\n\t        return allowedProperties.indexOf(prop) === -1;\n\t      });\n\t      if (extraProps.length) {\n\t        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n\t      }\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      link: function (scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  function formlyForm(formlyUsability) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: function (el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.hasOwnProperty(\"noNgForm\") ? \"div\" : \"ng-form\";\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=?\", // we'll do our own warning to help with migrations\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function ($scope) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function (scope, el, attrs) {\n\t        if (attrs.hasOwnProperty(\"result\")) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n\t        }\n\t        if (attrs.name !== \"form\") {\n\t          // then they specified their own name\n\t          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n\t        }\n\t        // enforce the model attribute because we're making it optional to help with migrations\n\t        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this2 = this;\n\t\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      templateManipulators: {\n\t        preWrapper: [ngModelAttrsManipulator],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      if (!name) {\n\t        return undefined;\n\t      }\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      if (!options.name) {\n\t        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n\t      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n\t        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n\t      } else if (options.template && options.templateUrl) {\n\t        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t    }\n\t\n\t    function setWrapper(options, name) {\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        return setWrapper({\n\t          template: options,\n\t          name: name\n\t        });\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      if (wrappers.length === 1) {\n\t        return wrappers[0];\n\t      } else if (wrappers.length > 1) {\n\t        return wrappers;\n\t      }\n\t      // otherwise nothing\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t    function ngModelAttrsManipulator(template, options, scope) {\n\t      /* jshint maxcomplexity:7 */\n\t      var el = angular.element(\"<a></a>\");\n\t      var data = options.data;\n\t      if (data.noTouchy) {\n\t        return template;\n\t      }\n\t      el.append(template);\n\t      var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n\t      if (!modelEls || !modelEls.length) {\n\t        return template;\n\t      }\n\t      addNgModelAttrs(options.ngModelAttrs);\n\t\n\t      addIfNotPresent(modelEls, \"id\", scope.id);\n\t      addIfNotPresent(modelEls, \"name\", scope.id);\n\t\n\t      if (angular.isDefined(options.validators)) {\n\t        addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n\t      }\n\t      if (angular.isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n\t        if (options.modelOptions.getterSetter) {\n\t          modelEls.attr(\"ng-model\", \"options.value\");\n\t        }\n\t      }\n\t      addTemplateOptionsAttrs();\n\t\n\t      return el.html();\n\t\n\t\n\t      function addTemplateOptionsAttrs() {\n\t        // if the field has specified values for these, then we want to add the attributes and watch them for changes.\n\t        var boundAttributes = angular.extend(data.ngModelBoundAttributes || {}, {\n\t          \"ng-disabled\": \"disabled\",\n\t          \"ng-required\": \"required\",\n\t          \"ng-pattern\": \"pattern\",\n\t          \"ng-maxlength\": \"maxlength\",\n\t          \"ng-minlength\": \"minlength\"\n\t        });\n\t        var invokedAttributes = angular.extend(data.ngModelInvokedAttributes || {}, {\n\t          \"ng-change\": \"onChange\",\n\t          \"ng-keydown\": \"onKeydown\",\n\t          \"ng-keyup\": \"onKeyup\",\n\t          \"ng-keypress\": \"onKeypress\",\n\t          \"ng-click\": \"onClick\",\n\t          \"ng-focus\": \"onFocus\",\n\t          \"ng-blur\": \"onBlur\"\n\t        });\n\t        // attributes are wrapped in curly braces\n\t        var attributes = angular.extend(data.ngModelAttributes || {}, {\n\t          \"formly-focus\": \"focus\",\n\t          placeholder: \"placeholder\",\n\t          min: \"min\",\n\t          max: \"max\",\n\t          tabindex: \"tabindex\",\n\t          type: \"type\"\n\t        });\n\t\n\t        addDefinedAttributes(modelEls, boundAttributes, options);\n\t        addDefinedAttributes(modelEls, attributes, options, \"{{\", \"}}\");\n\t        addDefinedAttributes(modelEls, invokedAttributes, options, function (val) {\n\t          return angular.isString(val) ? \"$eval(\" : \"\";\n\t        }, function (val) {\n\t          return angular.isString(val) ? \")\" : \"(model[options.key], options, this, $event)\";\n\t        });\n\t      }\n\t\n\t      function addNgModelAttrs(ngModelAttrs) {\n\t        ngModelAttrs = ngModelAttrs || {};\n\t        angular.forEach(ngModelAttrs.bound, function (val, attr) {\n\t          addIfNotPresent(modelEls, attr, \"options.ngModelAttrs.bound['\" + attr + \"']\");\n\t        });\n\t        angular.forEach(ngModelAttrs.unbound, function (val, attr) {\n\t          addIfNotPresent(modelEls, attr, scope.$eval(val));\n\t        });\n\t      }\n\t\n\t      function addDefinedAttributes(els, attrs, options) {\n\t        var prefix = arguments[3] === undefined ? \"\" : arguments[3];\n\t        var suffix = arguments[4] === undefined ? \"\" : arguments[4];\n\t        /* jshint maxcomplexity:6 */\n\t        var to = options.templateOptions;\n\t        var ep = options.expressionProperties;\n\t        if (!to && !ep) {\n\t          return; // no reason to iterate if these don't exist...\n\t        } else {\n\t          to = to || {};\n\t          ep = ep || {};\n\t        }\n\t        angular.forEach(attrs, function (val, attrName) {\n\t          // if it's defined as a property on template options, or if it's an expression property,\n\t          // then we'll add the attribute (and hence the watchers)\n\t          if (angular.isDefined(to[val]) || angular.isDefined(ep[\"templateOptions.\" + val])) {\n\t            var valPrefix = angular.isFunction(prefix) ? prefix(val) : prefix;\n\t            var valSuffix = angular.isFunction(suffix) ? suffix(val) : suffix;\n\t            addIfNotPresent(els, \"\" + attrName, \"\" + valPrefix + \"options.templateOptions['\" + val + \"']\" + valSuffix);\n\t          }\n\t        });\n\t      }\n\t\n\t      function addIfNotPresent(el, attr, val) {\n\t        if (!el.attr(attr)) {\n\t          el.attr(attr, val);\n\t        }\n\t      }\n\t    }\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t\n\t\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", function () {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"3.0.6\"));\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", function () {\n\t    var objectPrototype = Object.getPrototypeOf({});\n\t    var arrayPrototype = Object.getPrototypeOf([]);\n\t    return {\n\t      formlyEval: formlyEval,\n\t      getFieldId: getFieldId,\n\t      reverseDeepMerge: reverseDeepMerge\n\t    };\n\t\n\t    function formlyEval(scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    }\n\t\n\t    function getFieldId(formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    }\n\t\n\t    function reverseDeepMerge() {\n\t      var realRes = arguments[0];\n\t      var res = {};\n\t      angular.forEach([].concat(_slice.call(arguments)).reverse(), function (src) {\n\t        if (!src) {\n\t          return;\n\t        }\n\t        angular.forEach(src, function (val, prop) {\n\t          /* jshint maxcomplexity:7 */\n\t          if (typeof val === \"object\" && val !== null && (Object.getPrototypeOf(val) === objectPrototype || Object.getPrototypeOf(val) === arrayPrototype)) {\n\t            var deepRes = res[prop];\n\t            if (!deepRes && angular.isArray(val)) {\n\t              deepRes = [];\n\t            } else if (!deepRes) {\n\t              deepRes = {};\n\t            }\n\t            res[prop] = reverseDeepMerge(deepRes, val);\n\t          } else if (angular.isDefined(val)) {\n\t            res[prop] = val;\n\t          }\n\t        });\n\t      });\n\t      angular.forEach(realRes, function (val, prop) {\n\t        delete realRes[prop];\n\t      });\n\t      angular.forEach(res, function (val, prop) {\n\t        realRes[prop] = val;\n\t      });\n\t      res = realRes;\n\t      return res;\n\t    }\n\t\n\t  });\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1c846e358baa5a07238d\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\n\nvar angular = require(\"angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", \"$q\", function (formlyUtil, $q) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n        checkValidators(validators);\n        scope.options = scope.options || {};\n        scope.options.validationMessages = {};\n\n        // setup watchers and parsers\n        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n        angular.forEach(validators, function (validator, name) {\n          var message = validator.message;\n          if (message) {\n            scope.options.validationMessages[name] = function () {\n              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n            };\n          }\n          validator = angular.isObject(validator) ? validator.expression : validator;\n          if (hasValidators) {\n            var isPossiblyAsync = !angular.isString(validator);\n            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          } else {\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              ctrl.$setValidity(name, isValid);\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n\n    function checkValidators(validators) {\n      var allowedProperties = [\"expression\", \"message\"];\n      var validatorsWithExtraProps = {};\n      angular.forEach(validators, function (validator, name) {\n        var extraProps = [];\n        angular.forEach(validator, function (v, key) {\n          if (allowedProperties.indexOf(key) === -1) {\n            extraProps.push(key);\n          }\n        });\n        if (extraProps.length) {\n          validatorsWithExtraProps[name] = extraProps;\n        }\n      });\n      if (Object.keys(validatorsWithExtraProps).length) {\n        throw new Error([\"Validators are only allowed to have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n      }\n    }\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$interval\", \"$parse\", \"$controller\", function fieldController($scope, $interval, $parse, $controller) {\n        var opts = $scope.options;\n        var fieldType = opts.type && formlyConfig.getType(opts.type);\n        simplifyLife(opts);\n        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n        apiCheck(opts);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\n        // initalization\n        extendOptionsWithDefaults(opts, $scope.index);\n        runExpressions();\n        setFormControl($scope, opts, $interval);\n        addModelWatcher($scope, opts);\n        invokeControllers($scope, opts, fieldType);\n\n        // function definitions\n        function runExpressions() {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n            var setter = $parse(prop).assign;\n            var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n            promise.then(function (value) {\n              setter(field, value);\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function simplifyLife(options) {\n          // add data and templateOptions as empty objects so you don't have to undefined check everywhere\n          formlyUtil.reverseDeepMerge(options, {\n            data: {},\n            templateOptions: {}\n          });\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options, type) {\n          if (type) {\n            mergeOptions(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, function (typeName) {\n            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n\n        function mergeOptions(options, extraOptions) {\n          if (extraOptions) {\n            if (angular.isFunction(extraOptions)) {\n              extraOptions = extraOptions(options);\n            }\n            formlyUtil.reverseDeepMerge(options, extraOptions);\n          }\n        }\n\n        function extendOptionsWithDefaults(options, index) {\n          angular.extend(options, {\n            // attach the key in case the formly-field directive is used directly\n            key: options.key || index || 0,\n            value: valueGetterSetter,\n            runExpressions: runExpressions\n          });\n        }\n\n        // initialization functions\n        function setFormControl(scope, options, $interval) {\n          if (options.noFormControl) {\n            return;\n          }\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = $interval(function () {\n            iterations++;\n            if (!angular.isDefined(options.key)) {\n              return cleanUp();\n            }\n            var formControl = scope.form && scope.form[scope.id];\n            if (formControl) {\n              options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            $interval.cancel(interval);\n          }\n        }\n\n        function addModelWatcher(scope, options) {\n          if (options.model) {\n            scope.$watch(\"options.model\", runExpressions, true);\n          }\n        }\n\n        function invokeControllers(scope) {\n          var options = arguments[1] === undefined ? {} : arguments[1];\n          var type = arguments[2] === undefined ? {} : arguments[2];\n          angular.forEach([type.controller, options.controller], function (controller) {\n            if (controller) {\n              $controller(controller, { $scope: scope });\n            }\n          });\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n        var args = arguments;\n        var thusly = this;\n        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n        });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n          if (type && type.link) {\n            type.link.apply(thusly, args);\n          }\n          if (scope.options.link) {\n            scope.options.link.apply(thusly, args);\n          }\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, function (manipulator) {\n              chain = chain.then(function (template) {\n                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element(\"<a></a>\");\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      var type = formlyConfig.getType(options.type, true, options);\n      var template = options.template || type && type.template;\n      var templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(template, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      var wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper) {\n          return $q.when(template);\n        } else if (angular.isArray(wrapper)) {\n          wrapper.forEach(formlyUsability.checkWrapper);\n          var promises = wrapper.map(function (w) {\n            return getTemplate(w.template || w.templateUrl, !w.template);\n          });\n          return $q.all(promises).then(function (wrappersTemplates) {\n            wrappersTemplates.forEach(function (wrapperTemplate, index) {\n              formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n            });\n            wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n            var totalWrapper = wrappersTemplates.shift();\n            wrappersTemplates.forEach(function (wrapperTemplate) {\n              totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n            });\n            return doTransclusion(totalWrapper, template);\n          });\n        } else {\n          formlyUsability.checkWrapper(wrapper);\n          var t = wrapper.template || wrapper.templateUrl;\n          return getTemplate(t, !wrapper.template).then(function (wrapperTemplate) {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper);\n            return doTransclusion(wrapperTemplate, template);\n          });\n        }\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n      superWrapper.append(wrapper);\n      var transcludeEl = superWrapper.find(\"formly-transclude\");\n      transcludeEl.replaceWith(template);\n      return superWrapper.html();\n    }\n\n    function getWrapperOption(options) {\n      /* jshint maxcomplexity:9 */\n      var templateOption = options.wrapper;\n      // explicit null means no wrapper\n      if (templateOption === null) {\n        return \"\";\n      }\n      var wrapper = templateOption;\n      // nothing specified means use the default wrapper for the type\n      if (!templateOption) {\n        wrapper = formlyConfig.getWrapperByType(options.type);\n      } else if (angular.isString(templateOption)) {\n        // string means it's a type\n        wrapper = formlyConfig.getWrapper(templateOption);\n      } else if (angular.isArray(templateOption)) {\n        // array means wrap the wrappers\n        wrapper = templateOption.map(function (wrapperName) {\n          return formlyConfig.getWrapper(wrapperName);\n        });\n      }\n      wrapper = arrayify(wrapper);\n      var defaultWrapper = formlyConfig.getWrapper();\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      if (wrapper.length > 1) {\n        return wrapper;\n      } else if (wrapper.length === 1) {\n        return wrapper[0];\n      }\n      // otherwise return nothing\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      // check that only allowed properties are provided\n      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\",\n      // things we add to the field after the fact are ok\n      \"validationMessages\", \"formControl\", \"value\", \"runExpressions\"];\n      var extraProps = Object.keys(options).filter(function (prop) {\n        return allowedProperties.indexOf(prop) === -1;\n      });\n      if (extraProps.length) {\n        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n      }\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      link: function (scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe(\"formlyFocus\", function (value) {\n          if (value === \"true\") {\n            $timeout(function () {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~ ~attrs.focusWait);\n          } else if (value === \"false\") {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-focus.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", formlyForm);\n\n  formlyForm.tests = ON_TEST ? require(\"./formly-form.test\")(ngModule) : null;\n\n  function formlyForm(formlyUsability) {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: function (el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        var rootEl = attrs.hasOwnProperty(\"noNgForm\") ? \"div\" : \"ng-form\";\n        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=?\", // we'll do our own warning to help with migrations\n        form: \"=?\"\n      },\n      controller: [\"$scope\", function ($scope) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }],\n      link: function (scope, el, attrs) {\n        if (attrs.hasOwnProperty(\"result\")) {\n          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n        }\n        if (attrs.name !== \"form\") {\n          // then they specified their own name\n          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n        }\n        // enforce the model attribute because we're making it optional to help with migrations\n        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n        }\n      }\n    };\n  }\n  formlyForm.$inject = [\"formlyUsability\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n  require(\"./formly-focus\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this2 = this;\n\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = \"default\";\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n\n    angular.extend(this, {\n      setType: setType,\n      getType: getType,\n      setWrapper: setWrapper,\n      getWrapper: getWrapper,\n      getWrapperByType: getWrapperByType,\n      removeWrapperByName: removeWrapperByName,\n      removeWrappersForType: removeWrappersForType,\n      disableWarnings: false,\n      templateManipulators: {\n        preWrapper: [ngModelAttrsManipulator],\n        postWrapper: []\n      },\n      $get: function () {\n        return _this2;\n      }\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        typeMap[options.name] = options;\n      } else {\n        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      if (!name) {\n        return undefined;\n      }\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n      } else {\n        return type;\n      }\n    }\n\n    function checkType(options) {\n      if (!options.name) {\n        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n      } else if (options.template && options.templateUrl) {\n        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, \"types\");\n      } else {\n        delete options.overwriteOk;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name: name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      if (wrappers.length === 1) {\n        return wrappers[0];\n      } else if (wrappers.length > 1) {\n        return wrappers;\n      }\n      // otherwise nothing\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach(function (wrapper) {\n          return removeWrapperByName(wrapper.name);\n        });\n        return wrappers;\n      }\n    }\n\n    function ngModelAttrsManipulator(template, options, scope) {\n      /* jshint maxcomplexity:7 */\n      var el = angular.element(\"<a></a>\");\n      var data = options.data;\n      if (data.noTouchy) {\n        return template;\n      }\n      el.append(template);\n      var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n      if (!modelEls || !modelEls.length) {\n        return template;\n      }\n      addNgModelAttrs(options.ngModelAttrs);\n\n      addIfNotPresent(modelEls, \"id\", scope.id);\n      addIfNotPresent(modelEls, \"name\", scope.id);\n\n      if (angular.isDefined(options.validators)) {\n        addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n      }\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n        if (options.modelOptions.getterSetter) {\n          modelEls.attr(\"ng-model\", \"options.value\");\n        }\n      }\n      addTemplateOptionsAttrs();\n\n      return el.html();\n\n\n      function addTemplateOptionsAttrs() {\n        // if the field has specified values for these, then we want to add the attributes and watch them for changes.\n        var boundAttributes = angular.extend(data.ngModelBoundAttributes || {}, {\n          \"ng-disabled\": \"disabled\",\n          \"ng-required\": \"required\",\n          \"ng-pattern\": \"pattern\",\n          \"ng-maxlength\": \"maxlength\",\n          \"ng-minlength\": \"minlength\"\n        });\n        var invokedAttributes = angular.extend(data.ngModelInvokedAttributes || {}, {\n          \"ng-change\": \"onChange\",\n          \"ng-keydown\": \"onKeydown\",\n          \"ng-keyup\": \"onKeyup\",\n          \"ng-keypress\": \"onKeypress\",\n          \"ng-click\": \"onClick\",\n          \"ng-focus\": \"onFocus\",\n          \"ng-blur\": \"onBlur\"\n        });\n        // attributes are wrapped in curly braces\n        var attributes = angular.extend(data.ngModelAttributes || {}, {\n          \"formly-focus\": \"focus\",\n          placeholder: \"placeholder\",\n          min: \"min\",\n          max: \"max\",\n          tabindex: \"tabindex\",\n          type: \"type\"\n        });\n\n        addDefinedAttributes(modelEls, boundAttributes, options);\n        addDefinedAttributes(modelEls, attributes, options, \"{{\", \"}}\");\n        addDefinedAttributes(modelEls, invokedAttributes, options, function (val) {\n          return angular.isString(val) ? \"$eval(\" : \"\";\n        }, function (val) {\n          return angular.isString(val) ? \")\" : \"(model[options.key], options, this, $event)\";\n        });\n      }\n\n      function addNgModelAttrs(ngModelAttrs) {\n        ngModelAttrs = ngModelAttrs || {};\n        angular.forEach(ngModelAttrs.bound, function (val, attr) {\n          addIfNotPresent(modelEls, attr, \"options.ngModelAttrs.bound['\" + attr + \"']\");\n        });\n        angular.forEach(ngModelAttrs.unbound, function (val, attr) {\n          addIfNotPresent(modelEls, attr, scope.$eval(val));\n        });\n      }\n\n      function addDefinedAttributes(els, attrs, options) {\n        var prefix = arguments[3] === undefined ? \"\" : arguments[3];\n        var suffix = arguments[4] === undefined ? \"\" : arguments[4];\n        /* jshint maxcomplexity:6 */\n        var to = options.templateOptions;\n        var ep = options.expressionProperties;\n        if (!to && !ep) {\n          return; // no reason to iterate if these don't exist...\n        } else {\n          to = to || {};\n          ep = ep || {};\n        }\n        angular.forEach(attrs, function (val, attrName) {\n          // if it's defined as a property on template options, or if it's an expression property,\n          // then we'll add the attribute (and hence the watchers)\n          if (angular.isDefined(to[val]) || angular.isDefined(ep[\"templateOptions.\" + val])) {\n            var valPrefix = angular.isFunction(prefix) ? prefix(val) : prefix;\n            var valSuffix = angular.isFunction(suffix) ? suffix(val) : suffix;\n            addIfNotPresent(els, \"\" + attrName, \"\" + valPrefix + \"options.templateOptions['\" + val + \"']\" + valSuffix);\n          }\n        });\n      }\n\n      function addIfNotPresent(el, attr, val) {\n        if (!el.attr(attr)) {\n          el.attr(attr, val);\n        }\n      }\n    }\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn.apply(console, arguments);\n      }\n    }\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", function () {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", function () {\n    var objectPrototype = Object.getPrototypeOf({});\n    var arrayPrototype = Object.getPrototypeOf([]);\n    return {\n      formlyEval: formlyEval,\n      getFieldId: getFieldId,\n      reverseDeepMerge: reverseDeepMerge\n    };\n\n    function formlyEval(scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue,\n          $modelValue: modelValue\n        });\n      }\n    }\n\n    function getFieldId(formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    }\n\n    function reverseDeepMerge() {\n      var realRes = arguments[0];\n      var res = {};\n      angular.forEach([].concat(_slice.call(arguments)).reverse(), function (src) {\n        if (!src) {\n          return;\n        }\n        angular.forEach(src, function (val, prop) {\n          /* jshint maxcomplexity:7 */\n          if (typeof val === \"object\" && val !== null && (Object.getPrototypeOf(val) === objectPrototype || Object.getPrototypeOf(val) === arrayPrototype)) {\n            var deepRes = res[prop];\n            if (!deepRes && angular.isArray(val)) {\n              deepRes = [];\n            } else if (!deepRes) {\n              deepRes = {};\n            }\n            res[prop] = reverseDeepMerge(deepRes, val);\n          } else if (angular.isDefined(val)) {\n            res[prop] = val;\n          }\n        });\n      });\n      angular.forEach(realRes, function (val, prop) {\n        delete realRes[prop];\n      });\n      angular.forEach(res, function (val, prop) {\n        realRes[prop] = val;\n      });\n      res = realRes;\n      return res;\n    }\n\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}